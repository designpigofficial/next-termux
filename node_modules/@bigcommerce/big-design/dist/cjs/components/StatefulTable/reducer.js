"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReducer = exports.createReducerInit = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var createReducerInit = function createReducerInit() {
  return function (_ref) {
    var columns = _ref.columns,
        defaultSelected = _ref.defaultSelected,
        items = _ref.items,
        pagination = _ref.pagination;
    var currentPage = 1;
    var itemsPerPage = 25;
    var currentItems = getItems(items, pagination, {
      currentPage: currentPage,
      itemsPerPage: itemsPerPage
    });
    return {
      activePills: [],
      currentItems: currentItems,
      columns: augmentColumns(columns),
      filteredItems: [],
      isPaginationEnabled: pagination,
      items: items,
      pagination: {
        currentPage: currentPage,
        itemsPerPage: itemsPerPage,
        itemsPerPageOptions: [25, 50, 100, 250],
        totalItems: items.length
      },
      searchValue: '',
      submittedSearchValue: '',
      selectedItems: defaultSelected,
      sortable: {
        direction: 'ASC'
      }
    };
  };
};

exports.createReducerInit = createReducerInit;

var createReducer = function createReducer() {
  return function (state, action) {
    switch (action.type) {
      case 'COLUMNS_CHANGED':
        {
          var columns = action.columns;
          return _objectSpread(_objectSpread({}, state), {}, {
            columns: augmentColumns(columns)
          });
        }

      case 'ITEMS_CHANGED':
        {
          var currentPage = 1;
          var _items = action.items;
          var isPaginationEnabled = action.isPaginationEnabled;
          var currentItems = getItems(_items, isPaginationEnabled, {
            currentPage: currentPage,
            itemsPerPage: state.pagination.itemsPerPage
          });
          var selectedItems = state.selectedItems.filter(function (item) {
            return _items.includes(item);
          });
          return _objectSpread(_objectSpread({}, state), {}, {
            currentItems: currentItems,
            isPaginationEnabled: isPaginationEnabled,
            items: _items,
            selectedItems: selectedItems,
            pagination: _objectSpread(_objectSpread({}, state.pagination), {}, {
              currentPage: currentPage,
              totalItems: _items.length
            }),
            sortable: {
              direction: state.sortable.direction
            }
          });
        }

      case 'PAGE_CHANGE':
        {
          var filtersActive = state.activePills.length > 0 || !!state.searchValue;

          var _items2 = filtersActive ? state.filteredItems : state.items;

          var _currentPage = action.page;

          var _currentItems = getItems(_items2, true, {
            currentPage: _currentPage,
            itemsPerPage: state.pagination.itemsPerPage
          });

          return _objectSpread(_objectSpread({}, state), {}, {
            currentItems: _currentItems,
            pagination: _objectSpread(_objectSpread({}, state.pagination), {}, {
              currentPage: _currentPage
            })
          });
        }

      case 'ITEMS_PER_PAGE_CHANGE':
        {
          var _currentPage2 = 1;
          var itemsPerPage = action.itemsPerPage;

          var _currentItems2 = getItems(state.items, true, {
            currentPage: _currentPage2,
            itemsPerPage: itemsPerPage
          });

          return _objectSpread(_objectSpread({}, state), {}, {
            currentItems: _currentItems2,
            pagination: _objectSpread(_objectSpread({}, state.pagination), {}, {
              currentPage: _currentPage2,
              itemsPerPage: itemsPerPage
            })
          });
        }

      case 'SEARCH_VALUE_CHANGE':
        {
          return _objectSpread(_objectSpread({}, state), {}, {
            searchValue: action.value
          });
        }

      case 'SELECTED_ITEMS':
        {
          return _objectSpread(_objectSpread({}, state), {}, {
            selectedItems: action.selectedItems
          });
        }

      case 'SET_PILL_TABS_PROPS':
        {
          return _objectSpread(_objectSpread({}, state), {}, {
            pillTabsProps: action.pillTabsProps
          });
        }

      case 'SORT':
        {
          var _action$column = action.column,
              hash = _action$column.hash,
              _sortFn = _action$column.sortFn,
              _sortKey = _action$column.sortKey;
          var _direction = action.direction;

          if (!_sortKey && !_sortFn) {
            return state;
          }

          var _items3 = _sortKey ? sort(state.items, _direction, _sortKey) : _sortFn ? sort(state.items, _direction, _sortFn) : state.items;

          var _currentItems3 = getItems(_items3, state.isPaginationEnabled, {
            currentPage: 1,
            itemsPerPage: state.pagination.itemsPerPage
          });

          return _objectSpread(_objectSpread({}, state), {}, {
            currentItems: _currentItems3,
            items: _items3,
            pagination: _objectSpread(_objectSpread({}, state.pagination), {}, {
              currentPage: 1
            }),
            sortable: {
              direction: _direction,
              columnHash: hash
            }
          });
        }

      case 'TOGGLE_PILL':
        {
          if (!state.pillTabsProps) {
            return state;
          }

          var activePills = getActivePills(state.pillTabsProps.items, state.activePills, action.pillId);

          var _currentItems4 = togglePill(state.items, activePills, action.filter);

          if (state.submittedSearchValue) {
            _currentItems4 = onSearchSubmit(_currentItems4, state.submittedSearchValue, state.columns);
          }

          return _objectSpread(_objectSpread({}, state), {}, {
            activePills: activePills,
            pagination: _objectSpread(_objectSpread({}, state.pagination), {}, {
              currentPage: 1,
              totalItems: _currentItems4.length
            }),
            currentItems: _currentItems4,
            filteredItems: _currentItems4
          });
        }

      case 'ON_SEARCH_SUBMIT':
        {
          var searchValue = state.searchValue,
              _activePills = state.activePills;
          var _currentItems5 = state.items;

          if (_activePills.length > 0 && action.filterPills) {
            _currentItems5 = togglePill(_currentItems5, _activePills, action.filterPills);
          }

          if (searchValue) {
            _currentItems5 = onSearchSubmit(_currentItems5, searchValue, state.columns);
          }

          return _objectSpread(_objectSpread({}, state), {}, {
            pagination: _objectSpread(_objectSpread({}, state.pagination), {}, {
              currentPage: 1,
              totalItems: _currentItems5.length
            }),
            currentItems: _currentItems5,
            filteredItems: _currentItems5,
            submittedSearchValue: searchValue
          });
        }

      default:
        return state;
    }
  };
};

exports.createReducer = createReducer;

function augmentColumns(columns) {
  return columns.map(function (column) {
    return _objectSpread(_objectSpread({}, column), {}, {
      isSortable: Boolean(column.sortKey || column.sortFn)
    });
  });
}

function getItems(items, isPaginationEnabled, paginationOptions) {
  if (!isPaginationEnabled) {
    return items;
  }

  var maxItems = paginationOptions.currentPage * paginationOptions.itemsPerPage;
  var lastItem = Math.min(maxItems, items.length);
  var firstItem = Math.max(0, maxItems - paginationOptions.itemsPerPage);
  return items.slice(firstItem, lastItem);
}

function sort(items, direction, sortKeyOrFn) {
  return (0, _toConsumableArray2.default)(items).sort(function (firstItem, secondItem) {
    if (typeof sortKeyOrFn === 'function') {
      return sortKeyOrFn(firstItem, secondItem, direction);
    }

    var sortKey = sortKeyOrFn;
    var firstValue = firstItem[sortKey];
    var secondValue = secondItem[sortKey];

    if (typeof firstValue === 'number' && typeof secondValue === 'number') {
      return direction === 'ASC' ? firstValue - secondValue : secondValue - firstValue;
    }

    var firstValueString = String(firstValue);
    var secondValueString = String(secondValue);
    return direction === 'ASC' ? firstValueString.localeCompare(secondValueString) : secondValueString.localeCompare(firstValueString);
  });
}

function getActivePills(pillTabs, activePills, pillId) {
  var toggledPill = pillTabs.find(function (pill) {
    return pill.id === pillId;
  });

  if (!toggledPill) {
    return activePills;
  }

  var isToggledPillActive = !activePills.includes(pillId);
  return isToggledPillActive ? [].concat((0, _toConsumableArray2.default)(activePills), [toggledPill.id]) : activePills.filter(function (activeFilter) {
    return activeFilter !== toggledPill.id;
  });
}

function togglePill(items, activePills, filter) {
  return activePills.length > 0 ? activePills.map(function (pillId) {
    return filter(pillId, items);
  }).reduce(function (results, filteredItems) {
    var dedupedItems = filteredItems.filter(function (item) {
      return !results.includes(item);
    });
    return [].concat((0, _toConsumableArray2.default)(results), (0, _toConsumableArray2.default)(dedupedItems));
  }, []) : items;
}

var checkInclude = function checkInclude(searchValue, str) {
  return str.toLowerCase().trim().includes(searchValue.toLowerCase().trim());
};

function onSearchSubmit(items, searchValue, columns) {
  return items.filter(function (item) {
    return columns.some(function (column) {
      var element = item[column.hash];

      switch ((0, _typeof2.default)(element)) {
        case 'string':
        case 'number':
        case 'boolean':
          return checkInclude(searchValue, element.toString());

        default:
          return;
      }
    });
  });
}