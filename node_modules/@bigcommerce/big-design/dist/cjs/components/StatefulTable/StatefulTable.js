"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatefulTable = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../hooks");

var _utils = require("../../utils");

var _Box = require("../Box");

var _PillTabs = require("../PillTabs");

var _Search = require("../Search");

var _Table = require("../Table");

var _reducer = require("./reducer");

var _excluded = ["columns", "defaultSelected", "itemName", "items", "keyField", "onSelectionChange", "onRowDrop", "search", "pagination", "filters", "selectable", "stickyHeader"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var swapArrayElements = function swapArrayElements(array, sourceIndex, destinationIndex) {
  var smallerIndex = Math.min(sourceIndex, destinationIndex);
  var largerIndex = Math.max(sourceIndex, destinationIndex);
  return [].concat((0, _toConsumableArray2.default)(array.slice(0, smallerIndex)), (0, _toConsumableArray2.default)(sourceIndex < destinationIndex ? array.slice(smallerIndex + 1, largerIndex + 1) : []), [array[sourceIndex]], (0, _toConsumableArray2.default)(sourceIndex > destinationIndex ? array.slice(smallerIndex, largerIndex) : []), (0, _toConsumableArray2.default)(array.slice(largerIndex + 1)));
};

var InternalStatefulTable = function InternalStatefulTable(_ref) {
  var _ref$columns = _ref.columns,
      columns = _ref$columns === void 0 ? [] : _ref$columns,
      _ref$defaultSelected = _ref.defaultSelected,
      defaultSelected = _ref$defaultSelected === void 0 ? [] : _ref$defaultSelected,
      itemName = _ref.itemName,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      keyField = _ref.keyField,
      onSelectionChange = _ref.onSelectionChange,
      onRowDrop = _ref.onRowDrop,
      search = _ref.search,
      _ref$pagination = _ref.pagination,
      pagination = _ref$pagination === void 0 ? false : _ref$pagination,
      filters = _ref.filters,
      _ref$selectable = _ref.selectable,
      selectable = _ref$selectable === void 0 ? false : _ref$selectable,
      _ref$stickyHeader = _ref.stickyHeader,
      stickyHeader = _ref$stickyHeader === void 0 ? false : _ref$stickyHeader,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var reducer = (0, _react.useMemo)(function () {
    return (0, _reducer.createReducer)();
  }, []);
  var reducerInit = (0, _react.useMemo)(function () {
    return (0, _reducer.createReducerInit)();
  }, []);
  var sortable = (0, _react.useMemo)(function () {
    return columns.some(function (column) {
      return column.sortKey || column.sortFn;
    });
  }, [columns]);

  var _useReducer = (0, _react.useReducer)(reducer, {
    columns: columns,
    defaultSelected: defaultSelected,
    items: items,
    pagination: pagination,
    filters: filters,
    search: search
  }, reducerInit),
      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var columnsChangedCallback = (0, _react.useCallback)(function () {
    return dispatch({
      type: 'COLUMNS_CHANGED',
      columns: columns
    });
  }, [columns]);
  var itemsChangedCallback = (0, _react.useCallback)(function () {
    return dispatch({
      type: 'ITEMS_CHANGED',
      items: items,
      isPaginationEnabled: pagination
    });
  }, [items, pagination]);
  (0, _hooks.useDidUpdate)(columnsChangedCallback);
  (0, _hooks.useDidUpdate)(itemsChangedCallback);
  var onPageChange = (0, _react.useCallback)(function (page) {
    return dispatch({
      type: 'PAGE_CHANGE',
      page: page
    });
  }, []);
  var onItemsPerPageChange = (0, _react.useCallback)(function (itemsPerPage) {
    return dispatch({
      type: 'ITEMS_PER_PAGE_CHANGE',
      itemsPerPage: itemsPerPage
    });
  }, []);
  var onItemSelect = (0, _react.useCallback)(function (selectedItems) {
    dispatch({
      type: 'SELECTED_ITEMS',
      selectedItems: selectedItems
    });

    if (typeof onSelectionChange === 'function') {
      onSelectionChange(selectedItems);
    }
  }, [onSelectionChange]);
  var onSort = (0, _react.useCallback)(function (_columnHash, direction, column) {
    dispatch({
      type: 'SORT',
      column: column,
      direction: direction
    });
  }, []);
  var paginationOptions = (0, _react.useMemo)(function () {
    return pagination ? _objectSpread(_objectSpread({}, state.pagination), {}, {
      onItemsPerPageChange: onItemsPerPageChange,
      onPageChange: onPageChange
    }) : undefined;
  }, [pagination, state.pagination, onItemsPerPageChange, onPageChange]);
  var selectableOptions = (0, _react.useMemo)(function () {
    return selectable ? {
      selectedItems: state.selectedItems,
      onSelectionChange: onItemSelect
    } : undefined;
  }, [selectable, state.selectedItems, onItemSelect]);
  var sortableOptions = (0, _react.useMemo)(function () {
    return sortable ? _objectSpread(_objectSpread({}, state.sortable), {}, {
      onSort: onSort
    }) : undefined;
  }, [sortable, state.sortable, onSort]);
  var onDragEnd = (0, _react.useCallback)(function (from, to) {
    var updatedItems = swapArrayElements(state.currentItems, from, to);
    dispatch({
      type: 'ITEMS_CHANGED',
      items: updatedItems,
      isPaginationEnabled: pagination
    });

    if (typeof onRowDrop === 'function') {
      onRowDrop(updatedItems);
    }
  }, [state.currentItems, onRowDrop, pagination]);
  (0, _react.useEffect)(function () {
    if (!filters) {
      return;
    }

    var pillTabsProps = {
      activePills: state.activePills,
      onPillClick: function onPillClick(pillId) {
        dispatch({
          type: 'TOGGLE_PILL',
          pillId: pillId,
          filter: filters.filter
        });
      },
      items: filters.pillTabs
    };
    dispatch({
      type: 'SET_PILL_TABS_PROPS',
      pillTabsProps: pillTabsProps
    });
  }, [filters, state.activePills, search]);
  var searchProps = (0, _react.useMemo)(function () {
    return search ? {
      value: state.searchValue,
      onChange: function onChange(e) {
        return dispatch({
          type: 'SEARCH_VALUE_CHANGE',
          value: e.target.value
        });
      },
      onSubmit: function onSubmit() {
        return dispatch({
          type: 'ON_SEARCH_SUBMIT',
          filterPills: filters === null || filters === void 0 ? void 0 : filters.filter
        });
      }
    } : undefined;
  }, [search, state.searchValue, filters]);

  var renderPills = function renderPills() {
    if (!filters || !state.pillTabsProps) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_Box.Box, {
      marginBottom: "medium"
    }, /*#__PURE__*/_react.default.createElement(_PillTabs.PillTabs, state.pillTabsProps));
  };

  var renderSearch = function renderSearch() {
    if (!search || !searchProps) {
      return;
    }

    return /*#__PURE__*/_react.default.createElement(_Box.Box, {
      marginBottom: "medium"
    }, /*#__PURE__*/_react.default.createElement(_Search.Search, searchProps));
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderPills(), renderSearch(), /*#__PURE__*/_react.default.createElement(_Table.Table, (0, _extends2.default)({}, rest, {
    columns: state.columns,
    itemName: itemName,
    items: state.currentItems,
    keyField: keyField,
    pagination: paginationOptions,
    selectable: selectableOptions,
    sortable: sortableOptions,
    stickyHeader: stickyHeader,
    onRowDrop: onRowDrop ? onDragEnd : undefined
  })));
};

var StatefulTable = (0, _utils.typedMemo)(InternalStatefulTable);
exports.StatefulTable = StatefulTable;