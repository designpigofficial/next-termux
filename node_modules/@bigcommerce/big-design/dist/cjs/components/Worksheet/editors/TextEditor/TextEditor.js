"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextEditor = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../../utils");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalTextEditor = function InternalTextEditor(_ref) {
  var cell = _ref.cell,
      isEdited = _ref.isEdited,
      onBlur = _ref.onBlur,
      onKeyDown = _ref.onKeyDown;

  var _useState = (0, _react.useState)("".concat(cell.value)),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var handleChange = function handleChange(event) {
    setValue(event.target.value);
  };

  var handleKeyDown = function handleKeyDown(event) {
    // We always receive the value as a string type, cast to Number if column type is number
    onKeyDown(event, formatValue(value));
  };

  var formatValue = function formatValue(value) {
    return cell.type === 'number' && value !== '' ? Number(value) : value;
  };

  return /*#__PURE__*/_react.default.createElement(_styled.StyledInput, {
    autoFocus: true,
    isEdited: isEdited,
    onBlur: onBlur,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    value: value
  });
};

var TextEditor = (0, _utils.typedMemo)(InternalTextEditor);
exports.TextEditor = TextEditor;