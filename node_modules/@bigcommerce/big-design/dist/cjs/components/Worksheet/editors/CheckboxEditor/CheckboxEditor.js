"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxEditor = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../../utils");

var _Checkbox = require("../../../Checkbox");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalCheckboxEditor = function InternalCheckboxEditor(_ref) {
  var cell = _ref.cell,
      toggle = _ref.toggle,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange;
  var handleChange = (0, _react.useCallback)(function () {
    onChange(!cell.value);
  }, [cell, onChange]);
  (0, _react.useEffect)(function () {
    // toggle will only return true when a user has pressed
    // `enter` or `space` when a checkbox cell is selected.
    // It is virtually the same as clicking on the checkbox.
    if (toggle) {
      handleChange();
    }
  }, [cell.value, handleChange, toggle]);
  return /*#__PURE__*/_react.default.createElement(_styled.CheckboxWrapper, null, /*#__PURE__*/_react.default.createElement(_Checkbox.Checkbox, {
    disabled: cell.disabled,
    checked: cell.value,
    hiddenLabel: true,
    label: cell.value ? 'Checked' : 'Unchecked',
    onBlur: onBlur,
    onChange: handleChange
  }));
};

var CheckboxEditor = (0, _utils.typedMemo)(InternalCheckboxEditor);
exports.CheckboxEditor = CheckboxEditor;