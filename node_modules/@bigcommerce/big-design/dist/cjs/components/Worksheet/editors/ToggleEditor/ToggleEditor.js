"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleEditor = void 0;

var _bigDesignIcons = require("@bigcommerce/big-design-icons");

var _react = _interopRequireWildcard(require("react"));

var _Flex = require("../../../Flex");

var _hooks = require("../../hooks");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalToggleEditor = function InternalToggleEditor(_ref) {
  var rowId = _ref.rowId,
      toggle = _ref.toggle;

  var _useExpandable = (0, _hooks.useExpandable)(rowId),
      onToggle = _useExpandable.onToggle,
      isExpandable = _useExpandable.isExpandable,
      hasExpanded = _useExpandable.hasExpanded;

  var setEditingCell = (0, _hooks.useStore)(function (state) {
    return state.setEditingCell;
  });
  (0, _react.useEffect)(function () {
    if (toggle && isExpandable) {
      onToggle(hasExpanded);
    }

    setEditingCell(null);
  }, [hasExpanded, isExpandable, onToggle, setEditingCell, toggle]);
  return isExpandable ? /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
    justifyContent: "center"
  }, hasExpanded ? /*#__PURE__*/_react.default.createElement(_styled.StyledExpandButton, {
    iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ExpandMoreIcon, null),
    onClick: function onClick() {
      onToggle(true);
    },
    title: "toggle row expanded",
    variant: "subtle"
  }) : /*#__PURE__*/_react.default.createElement(_styled.StyledExpandButton, {
    iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ChevronRightIcon, null),
    onClick: function onClick() {
      onToggle(false);
    },
    title: "toggle row expanded",
    variant: "subtle"
  })) : null;
};

var ToggleEditor = /*#__PURE__*/(0, _react.memo)(InternalToggleEditor);
exports.ToggleEditor = ToggleEditor;