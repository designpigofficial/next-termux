"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalEditor = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../../utils");

var _Flex = require("../../../Flex");

var _Typography = require("../../../Typography");

var _hooks = require("../../hooks");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalModalEditor = function InternalModalEditor(_ref) {
  var cell = _ref.cell,
      formatting = _ref.formatting,
      isEditing = _ref.isEditing;
  var setOpenModal = (0, _hooks.useStore)(function (state) {
    return state.setOpenModal;
  });
  var setEditingCell = (0, _hooks.useStore)(function (state) {
    return state.setEditingCell;
  });
  var hash = cell.hash,
      value = cell.value;
  var buttonRef = /*#__PURE__*/(0, _react.createRef)();
  (0, _react.useEffect)(function () {
    if (isEditing) {
      setOpenModal(hash);
    }
  }, [hash, isEditing, setOpenModal]);
  var handleClick = (0, _react.useCallback)(function () {
    setEditingCell(cell);
  }, [cell, setEditingCell]);
  var renderedValue = (0, _react.useMemo)(function () {
    return formatting ? formatting(value) : "".concat(value);
  }, [formatting, value]);
  return /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  }, /*#__PURE__*/_react.default.createElement(_styled.StyledFlexItem, {
    paddingRight: "small",
    flexShrink: 1
  }, /*#__PURE__*/_react.default.createElement(_Typography.Small, {
    color: cell.disabled ? 'secondary50' : 'secondary70',
    ellipsis: true,
    title: renderedValue
  }, renderedValue)), /*#__PURE__*/_react.default.createElement(_styled.StyledButton, {
    disabled: cell.disabled,
    onClick: handleClick,
    ref: buttonRef,
    variant: "subtle"
  }, "Edit"));
};

var ModalEditor = (0, _utils.typedMemo)(InternalModalEditor);
exports.ModalEditor = ModalEditor;