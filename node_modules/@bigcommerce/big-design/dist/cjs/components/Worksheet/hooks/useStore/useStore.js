"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStore = exports.useStore = exports.Provider = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _zustand = _interopRequireDefault(require("zustand"));

var _context = _interopRequireDefault(require("zustand/context"));

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _createContext = (0, _context.default)(),
    Provider = _createContext.Provider,
    useStore = _createContext.useStore;

exports.useStore = useStore;
exports.Provider = Provider;

var createStore = function createStore() {
  return (0, _zustand.default)(function (set) {
    return {
      columns: [],
      editedCells: [],
      editingCell: null,
      expandableRows: {},
      hiddenRows: [],
      invalidCells: [],
      openedModal: null,
      rows: [],
      selectedCells: [],
      selectedRows: [],
      tableRef: null,
      addEditedCells: function addEditedCells(cells) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            editedCells: (0, _utils.mergeCells)(state.editedCells, cells)
          });
        });
      },
      addInvalidCells: function addInvalidCells(cells) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            invalidCells: (0, _utils.mergeCells)(state.invalidCells, cells)
          });
        });
      },
      removeInvalidCells: function removeInvalidCells(cells) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            invalidCells: (0, _utils.deleteCells)(state.invalidCells, cells)
          });
        });
      },
      setColumns: function setColumns(columns) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            columns: columns
          });
        });
      },
      setEditingCell: function setEditingCell(cell) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            editingCell: cell
          });
        });
      },
      setExpandableRows: function setExpandableRows(expandableRows) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            expandableRows: expandableRows,
            hiddenRows: (0, _utils.getHiddenRows)(expandableRows)
          });
        });
      },
      setHiddenRows: function setHiddenRows(hiddenRows) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            hiddenRows: hiddenRows
          });
        });
      },
      setOpenModal: function setOpenModal(value) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            openedModal: value
          });
        });
      },
      setRows: function setRows(rows) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            rows: rows
          });
        });
      },
      setSelectedCells: function setSelectedCells(cells) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            selectedCells: cells
          });
        });
      },
      setSelectedRows: function setSelectedRows(rowIndexes) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            selectedRows: rowIndexes
          });
        });
      },
      setTableRef: function setTableRef(ref) {
        return set(function (state) {
          return _objectSpread(_objectSpread({}, state), {}, {
            tableRef: ref
          });
        });
      }
    };
  });
};

exports.createStore = createStore;