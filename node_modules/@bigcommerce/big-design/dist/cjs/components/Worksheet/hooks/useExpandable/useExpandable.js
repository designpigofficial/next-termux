"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useExpandable = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = require("react");

var _ = require("./../");

var useExpandable = function useExpandable(rowId) {
  var expandableRows = (0, _.useStore)(function (state) {
    return state.expandableRows;
  });
  var hiddenRows = (0, _.useStore)(function (state) {
    return state.hiddenRows;
  });
  var setHiddenRows = (0, _.useStore)(function (state) {
    return state.setHiddenRows;
  });
  var onExpand = (0, _react.useCallback)(function () {
    var childIds = expandableRows[rowId];
    setHiddenRows(hiddenRows.filter(function (hiddenRow) {
      return !childIds.includes(hiddenRow);
    }));
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  var onCollapse = (0, _react.useCallback)(function () {
    var childIds = expandableRows[rowId];
    setHiddenRows([].concat((0, _toConsumableArray2.default)(hiddenRows), (0, _toConsumableArray2.default)(childIds)));
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  var onToggle = (0, _react.useCallback)(function (isExpanded) {
    if (isExpanded) {
      onCollapse();
    } else {
      onExpand();
    }
  }, [onCollapse, onExpand]);
  var isExpandable = expandableRows !== null && expandableRows[rowId] !== undefined;
  var hasExpanded = isExpandable && !hiddenRows.some(function (row) {
    return expandableRows[rowId].includes(row);
  });
  return (0, _react.useMemo)(function () {
    return {
      hasExpanded: hasExpanded,
      isExpandable: isExpandable,
      onToggle: onToggle
    };
  }, [hasExpanded, isExpandable, onToggle]);
};

exports.useExpandable = useExpandable;