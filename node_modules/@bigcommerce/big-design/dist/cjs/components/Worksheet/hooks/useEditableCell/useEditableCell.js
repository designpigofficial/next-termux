"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEditableCell = void 0;

var _react = require("react");

var _useStore = require("../useStore");

var _useTableFocus2 = require("../useTableFocus");

var _useUpdateItems2 = require("../useUpdateItems");

var useEditableCell = function useEditableCell(cell) {
  var setEditingCell = (0, _useStore.useStore)(function (state) {
    return state.setEditingCell;
  });

  var _useUpdateItems = (0, _useUpdateItems2.useUpdateItems)(),
      updateItems = _useUpdateItems.updateItems;

  var _useTableFocus = (0, _useTableFocus2.useTableFocus)(),
      focusTable = _useTableFocus.focusTable;

  var isEditing = (0, _useStore.useStore)((0, _react.useMemo)(function () {
    return function (_ref) {
      var editingCell = _ref.editingCell;
      return editingCell !== null && editingCell.columnIndex === cell.columnIndex && editingCell.rowIndex === cell.rowIndex;
    };
  }, [cell]));
  var restoreFocus = (0, _react.useCallback)(function () {
    setEditingCell(null);
    focusTable();
  }, [focusTable, setEditingCell]);
  var handleDoubleClick = (0, _react.useCallback)(function () {
    if (!cell.disabled) {
      setEditingCell(cell);
    }
  }, [cell, setEditingCell]);
  var handleBlur = (0, _react.useCallback)(function () {
    restoreFocus();
  }, [restoreFocus]);
  var handleChange = (0, _react.useCallback)(function (newValue) {
    updateItems([cell], [newValue]);
    restoreFocus();
  }, [cell, restoreFocus, updateItems]);
  var handleKeyDown = (0, _react.useCallback)(function (event, newValue) {
    var key = event.key;

    switch (key) {
      case 'Enter':
        event.preventDefault(); // Only call updateItems if cells have new values

        if (cell.value !== newValue) {
          updateItems([cell], [newValue]);
        }

        restoreFocus();
        break;

      case 'Escape':
        event.preventDefault();
        restoreFocus();
        break;
    }
  }, [cell, restoreFocus, updateItems]);
  return (0, _react.useMemo)(function () {
    return {
      handleBlur: handleBlur,
      handleChange: handleChange,
      handleDoubleClick: handleDoubleClick,
      handleKeyDown: handleKeyDown,
      isEditing: isEditing
    };
  }, [handleBlur, handleChange, handleDoubleClick, handleKeyDown, isEditing]);
};

exports.useEditableCell = useEditableCell;