"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateItemsProvider = exports.UpdateItemsContext = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../../utils");

var _hooks = require("../../hooks");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var UpdateItemsContext = /*#__PURE__*/(0, _react.createContext)(null);
exports.UpdateItemsContext = UpdateItemsContext;
var UpdateItemsProvider = (0, _utils.typedMemo)(function (_ref) {
  var children = _ref.children,
      items = _ref.items;
  var setRows = (0, _hooks.useStore)(function (state) {
    return state.setRows;
  });
  var addEditedCells = (0, _hooks.useStore)(function (state) {
    return state.addEditedCells;
  });
  var updateItems = (0, _react.useCallback)(function (cells, newValues) {
    setRows(cells.reduce(function (accum, cell, index) {
      var hash = cell.hash,
          rowIndex = cell.rowIndex; // Don't change since value is the same

      if (cell.value === newValues[index]) {
        return accum;
      }

      var row = accum[rowIndex];

      var updatedRow = _objectSpread(_objectSpread({}, row), {}, (0, _defineProperty2.default)({}, hash, newValues[index]));

      accum[rowIndex] = updatedRow;
      return accum;
    }, items));
    addEditedCells(cells.reduce(function (accum, cell, index) {
      // Don't add since value is the same
      if (cell.value === newValues[index]) {
        return accum;
      }

      return [].concat((0, _toConsumableArray2.default)(accum), [_objectSpread(_objectSpread({}, cell), {}, {
        value: newValues[index]
      })]);
    }, []));
  }, [addEditedCells, items, setRows]);
  var providerValue = (0, _react.useMemo)(function () {
    return {
      updateItems: updateItems
    };
  }, [updateItems]);
  return /*#__PURE__*/_react.default.createElement(UpdateItemsContext.Provider, {
    value: providerValue
  }, children);
});
exports.UpdateItemsProvider = UpdateItemsProvider;