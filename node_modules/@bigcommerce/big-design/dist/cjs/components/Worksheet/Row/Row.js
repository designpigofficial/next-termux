"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../utils");

var _Cell = require("../Cell");

var _hooks = require("../hooks");

var _RowStatus = require("../RowStatus");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalRow = function InternalRow(_ref) {
  var columns = _ref.columns,
      rowIndex = _ref.rowIndex;
  var row = (0, _hooks.useStore)((0, _react.useMemo)(function () {
    return function (state) {
      return state.rows[rowIndex];
    };
  }, [rowIndex]));
  var expandableRows = (0, _hooks.useStore)((0, _react.useMemo)(function () {
    return function (state) {
      return state.expandableRows;
    };
  }, []));
  var isExpanded = (0, _hooks.useStore)((0, _react.useMemo)(function () {
    return function (state) {
      return !state.hiddenRows.includes(row.id);
    };
  }, [row.id]));
  var parentId = (0, _react.useMemo)(function () {
    if (!expandableRows) {
      return;
    }

    var rowIds = Object.keys(expandableRows);
    return rowIds.find(function (rowId) {
      return expandableRows[rowId].find(function (childId) {
        return childId === row.id;
      });
    });
  }, [expandableRows, row.id]);
  var isChild = (0, _react.useMemo)(function () {
    return parentId !== undefined;
  }, [parentId]);
  var hasFormatting = (0, _react.useCallback)(function (column) {
    return column.type === 'text' || column.type === 'number' || column.type === 'modal';
  }, []);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableRow, {
    isChild: isChild,
    isExpanded: !isChild || isExpanded
  }, /*#__PURE__*/_react.default.createElement(_RowStatus.RowStatus, {
    rowIndex: rowIndex
  }), columns.map(function (column, columnIndex) {
    var _column$type;

    return /*#__PURE__*/_react.default.createElement(_Cell.Cell, {
      columnIndex: columnIndex,
      disabled: column.disabled,
      formatting: hasFormatting(column) ? column.formatting : undefined,
      hash: column.hash,
      key: "".concat(rowIndex, "-").concat(columnIndex),
      options: column.type === 'select' ? column.config.options : undefined,
      rowId: row.id,
      rowIndex: rowIndex,
      type: (_column$type = column.type) !== null && _column$type !== void 0 ? _column$type : 'text',
      validation: column.validation,
      value: row[column.hash]
    });
  }));
};

var Row = (0, _utils.typedMemo)(InternalRow);
exports.Row = Row;