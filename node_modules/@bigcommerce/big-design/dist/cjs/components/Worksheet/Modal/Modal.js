"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorksheetModal = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../utils");

var _Modal = require("../../Modal");

var _hooks = require("../hooks");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalWorksheetModal = function InternalWorksheetModal(_ref) {
  var column = _ref.column;
  var config = column.config,
      hash = column.hash;
  var header = config.header,
      render = config.render,
      _config$saveActionTex = config.saveActionText,
      saveActionText = _config$saveActionTex === void 0 ? 'Save' : _config$saveActionTex,
      _config$cancelActionT = config.cancelActionText,
      cancelActionText = _config$cancelActionT === void 0 ? 'Cancel' : _config$cancelActionT;
  var isModalOpen = (0, _hooks.useStore)((0, _react.useMemo)(function () {
    return function (state) {
      return state.openedModal === hash;
    };
  }, [hash]));
  var selectedCell = (0, _hooks.useStore)((0, _react.useMemo)(function () {
    return function (state) {
      return state.selectedCells[0];
    };
  }, []));
  var setOpenModal = (0, _hooks.useStore)(function (state) {
    return state.setOpenModal;
  });
  var setEditingCell = (0, _hooks.useStore)(function (state) {
    return state.setEditingCell;
  });

  var _useTableFocus = (0, _hooks.useTableFocus)(),
      focusTable = _useTableFocus.focusTable;

  var _useUpdateItems = (0, _hooks.useUpdateItems)(),
      updateItems = _useUpdateItems.updateItems;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      newValue = _useState2[0],
      setNewValue = _useState2[1];

  (0, _react.useEffect)(function () {
    if (selectedCell) {
      setNewValue(selectedCell.value);
    }
  }, [selectedCell]);
  var handleClose = (0, _react.useCallback)(function () {
    setOpenModal(null);
    setEditingCell(null);
    focusTable();
  }, [focusTable, setEditingCell, setOpenModal]);
  var handleSave = (0, _react.useCallback)(function () {
    if (selectedCell && newValue !== null && newValue !== selectedCell.value) {
      updateItems([selectedCell], [newValue]);
    }

    handleClose();
  }, [handleClose, newValue, selectedCell, updateItems]);
  var renderedContent = (0, _react.useMemo)(function () {
    var onChange = function onChange(newValue) {
      if (newValue !== undefined) {
        setNewValue(newValue);
      }
    };

    return selectedCell ? render(selectedCell.value, onChange) : null;
  }, [selectedCell, render]);
  return /*#__PURE__*/_react.default.createElement(_Modal.Modal, {
    actions: [{
      text: cancelActionText,
      variant: 'subtle',
      onClick: handleClose
    }, {
      text: saveActionText,
      onClick: handleSave
    }],
    closeOnClickOutside: false,
    closeOnEscKey: true,
    header: header,
    isOpen: isModalOpen,
    onClose: handleClose
  }, renderedContent);
};

var WorksheetModal = (0, _utils.typedMemo)(InternalWorksheetModal);
exports.WorksheetModal = WorksheetModal;