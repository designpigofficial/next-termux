"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PillTabs = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _bigDesignIcons = require("@bigcommerce/big-design-icons");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../hooks");

var _Button = require("../Button");

var _Dropdown = require("../Dropdown");

var _Flex = require("../Flex");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PillTabs = function PillTabs(_ref) {
  var activePills = _ref.activePills,
      items = _ref.items,
      onPillClick = _ref.onPillClick;
  var parentRef = /*#__PURE__*/(0, _react.createRef)();
  var dropdownRef = /*#__PURE__*/(0, _react.createRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isMenuVisible = _useState2[0],
      setIsMenuVisible = _useState2[1];

  var _useState3 = (0, _react.useState)(items.map(function (item) {
    return {
      isVisible: true,
      item: item,
      ref: /*#__PURE__*/(0, _react.createRef)()
    };
  })),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      pillsState = _useState4[0],
      setPillsState = _useState4[1];

  var hideOverflowedPills = (0, _react.useCallback)(function () {
    var _parentRef$current, _dropdownRef$current;

    var parentWidth = (_parentRef$current = parentRef.current) === null || _parentRef$current === void 0 ? void 0 : _parentRef$current.offsetWidth;
    var dropdownWidth = (_dropdownRef$current = dropdownRef.current) === null || _dropdownRef$current === void 0 ? void 0 : _dropdownRef$current.offsetWidth;

    if (!parentWidth || !dropdownWidth) {
      return;
    }

    var remainingWidth = parentWidth;
    var newState = pillsState.map(function (stateObj) {
      var _stateObj$ref$current;

      var pillWidth = (_stateObj$ref$current = stateObj.ref.current) === null || _stateObj$ref$current === void 0 ? void 0 : _stateObj$ref$current.offsetWidth;

      if (!pillWidth) {
        return stateObj;
      }

      if (remainingWidth - pillWidth > dropdownWidth) {
        remainingWidth = remainingWidth - pillWidth;
        return _objectSpread(_objectSpread({}, stateObj), {}, {
          isVisible: true
        });
      }

      return _objectSpread(_objectSpread({}, stateObj), {}, {
        isVisible: false
      });
    });
    var visiblePills = pillsState.filter(function (stateObj) {
      return stateObj.isVisible;
    });
    var newVisiblePills = newState.filter(function (stateObj) {
      return stateObj.isVisible;
    });

    if (visiblePills.length !== newVisiblePills.length) {
      setIsMenuVisible(newVisiblePills.length !== items.length);
      setPillsState(newState);
    }
  }, [items, parentRef, dropdownRef, pillsState]);
  var renderedDropdown = (0, _react.useMemo)(function () {
    var dropdownItems = pillsState.filter(function (stateObj) {
      return !stateObj.isVisible;
    }).map(function (stateObj) {
      var item = items.find(function (_ref2) {
        var title = _ref2.title;
        return title === stateObj.item.title;
      });
      var isActive = item ? activePills.includes(item.id) : false;
      return {
        content: stateObj.item.title,
        onItemClick: function onItemClick() {
          return onPillClick(stateObj.item.id);
        },
        hash: stateObj.item.title.toLowerCase(),
        icon: isActive ? /*#__PURE__*/_react.default.createElement(_bigDesignIcons.CheckIcon, null) : undefined
      };
    });
    return /*#__PURE__*/_react.default.createElement(_styled.StyledFlexItem, {
      "data-testid": "pilltabs-dropdown-toggle",
      isVisible: isMenuVisible,
      ref: dropdownRef,
      role: "listitem"
    }, /*#__PURE__*/_react.default.createElement(_Dropdown.Dropdown, {
      items: dropdownItems,
      toggle: /*#__PURE__*/_react.default.createElement(_Button.Button, {
        iconOnly: /*#__PURE__*/_react.default.createElement(_bigDesignIcons.MoreHorizIcon, {
          title: "add"
        }),
        variant: "subtle"
      })
    }));
  }, [items, pillsState, isMenuVisible, dropdownRef, activePills, onPillClick]);
  var renderedPills = (0, _react.useMemo)(function () {
    return items.map(function (item, index) {
      return /*#__PURE__*/_react.default.createElement(_styled.StyledFlexItem, {
        "data-testid": "pilltabs-pill-".concat(index),
        key: index,
        ref: pillsState[index].ref,
        isVisible: pillsState[index].isVisible,
        role: "listitem"
      }, /*#__PURE__*/_react.default.createElement(_styled.StyledPillTab, {
        disabled: !pillsState[index].isVisible,
        variant: "subtle",
        isActive: activePills.includes(item.id),
        onClick: function onClick() {
          return onPillClick(item.id);
        },
        marginRight: "xLarge"
      }, item.title));
    });
  }, [items, pillsState, activePills, onPillClick]);
  (0, _react.useEffect)(function () {
    hideOverflowedPills();
  }, [items, parentRef, pillsState, hideOverflowedPills]);
  (0, _hooks.useWindowResizeListener)(function () {
    hideOverflowedPills();
  });
  return items.length > 0 ? /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
    "data-testid": "pilltabs-wrapper",
    flexDirection: "row",
    flexWrap: "nowrap",
    ref: parentRef,
    role: "list"
  }, renderedPills, renderedDropdown) : null;
};

exports.PillTabs = PillTabs;
PillTabs.displayName = 'Pill Tabs';