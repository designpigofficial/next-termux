"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderCell = exports.DragIconHeaderCell = exports.HeaderCheckboxCell = void 0;

var _bigDesignIcons = require("@bigcommerce/big-design-icons");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../../../hooks");

var _utils = require("../../../utils");

var _Box = require("../../Box");

var _Tooltip = require("../../Tooltip");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalHeaderCell = function InternalHeaderCell(_ref) {
  var children = _ref.children,
      column = _ref.column,
      display = _ref.display,
      _ref$hide = _ref.hide,
      hide = _ref$hide === void 0 ? false : _ref$hide,
      isSorted = _ref.isSorted,
      onSortClick = _ref.onSortClick,
      sortDirection = _ref.sortDirection,
      stickyHeader = _ref.stickyHeader,
      actionsRef = _ref.actionsRef;
  var _column$align = column.align,
      align = _column$align === void 0 ? 'left' : _column$align,
      isSortable = column.isSortable,
      width = column.width,
      tooltip = column.tooltip;
  var actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  var tooltipId = (0, _hooks.useUniqueId)('table-header-tooltip');

  var renderSortIcon = function renderSortIcon() {
    if (!isSorted) {
      return null;
    }

    return sortDirection === 'ASC' ? /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ArrowUpwardIcon, {
      size: "medium",
      "data-testid": "asc-icon",
      title: "Ascending order"
    }) : /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ArrowDownwardIcon, {
      size: "medium",
      "data-testid": "desc-icon",
      title: "Descending order"
    });
  };

  var renderTooltip = function renderTooltip() {
    if (typeof tooltip === 'string' && tooltip.length > 0) {
      return /*#__PURE__*/_react.default.createElement(_Tooltip.Tooltip, {
        id: tooltipId,
        trigger: /*#__PURE__*/_react.default.createElement(_Box.Box, {
          as: "span",
          marginLeft: "xxSmall"
        }, /*#__PURE__*/_react.default.createElement(_bigDesignIcons.BaselineHelpIcon, {
          "aria-describedby": tooltipId,
          size: "medium",
          title: "Hover or focus for additional context."
        })),
        placement: "right"
      }, tooltip);
    }

    return null;
  };

  var handleClick = function handleClick(e) {
    e.preventDefault();

    if (isSortable && typeof onSortClick === 'function') {
      onSortClick(column);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderCell, {
    display: display,
    isSortable: isSortable,
    stickyHeader: stickyHeader,
    onClick: handleClick,
    width: width,
    stickyHeight: actionsSize.height
  }, /*#__PURE__*/_react.default.createElement(_styled.StyledFlex, {
    alignItems: "center",
    flexDirection: "row",
    hide: hide,
    align: align
  }, children, !hide && renderSortIcon(), renderTooltip()), hide && renderSortIcon());
};

var HeaderCheckboxCell = /*#__PURE__*/(0, _react.memo)(function (_ref2) {
  var stickyHeader = _ref2.stickyHeader,
      actionsRef = _ref2.actionsRef;
  var actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderCheckbox, {
    stickyHeader: stickyHeader,
    stickyHeight: actionsSize.height
  });
});
exports.HeaderCheckboxCell = HeaderCheckboxCell;
var DragIconHeaderCell = /*#__PURE__*/(0, _react.memo)(function (_ref3) {
  var actionsRef = _ref3.actionsRef;
  var actionsSize = (0, _hooks.useComponentSize)(actionsRef);
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableHeaderCell, {
    stickyHeight: actionsSize.height
  });
});
exports.DragIconHeaderCell = DragIconHeaderCell;
var HeaderCell = (0, _utils.typedMemo)(InternalHeaderCell);
exports.HeaderCell = HeaderCell;