"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableFigure = exports.Table = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactBeautifulDnd = require("react-beautiful-dnd");

var _hooks = require("../../hooks");

var _utils = require("../../utils");

var _Actions = require("./Actions");

var _Body = require("./Body");

var _Head = require("./Head");

var _HeaderCell = require("./HeaderCell");

var _HeaderCell2 = require("./HeaderCell/HeaderCell");

var _Row = require("./Row");

var _styled = require("./styled");

var _excluded = ["actions", "className", "columns", "emptyComponent", "headerless", "id", "itemName", "items", "keyField", "onRowDrop", "pagination", "selectable", "sortable", "stickyHeader", "style"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InternalTable = function InternalTable(props) {
  var actions = props.actions,
      className = props.className,
      columns = props.columns,
      emptyComponent = props.emptyComponent,
      _props$headerless = props.headerless,
      headerless = _props$headerless === void 0 ? false : _props$headerless,
      id = props.id,
      itemName = props.itemName,
      items = props.items,
      _props$keyField = props.keyField,
      keyField = _props$keyField === void 0 ? 'id' : _props$keyField,
      onRowDrop = props.onRowDrop,
      pagination = props.pagination,
      selectable = props.selectable,
      sortable = props.sortable,
      stickyHeader = props.stickyHeader,
      style = props.style,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var actionsRef = (0, _react.useRef)(null);
  var uniqueTableId = (0, _hooks.useUniqueId)('table');
  var tableIdRef = (0, _react.useRef)(id || uniqueTableId);
  var isSelectable = Boolean(selectable);

  var _useState = (0, _react.useState)(new Set()),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      selectedItems = _useState2[0],
      setSelectedItems = _useState2[1];

  var eventCallback = (0, _hooks.useEventCallback)(function (item) {
    if (!selectable || !item) {
      return;
    }

    var onSelectionChange = selectable.onSelectionChange;
    var nextIsSelected = !selectedItems.has(item);

    if (nextIsSelected) {
      onSelectionChange([].concat((0, _toConsumableArray2.default)(selectedItems), [item]));
    } else {
      onSelectionChange((0, _toConsumableArray2.default)(selectedItems).filter(function (selectedItem) {
        return selectedItem !== item;
      }));
    }
  });
  var selectableConditionalDep = selectable ? selectable.selectedItems : null;
  (0, _react.useEffect)(function () {
    if (selectable) {
      setSelectedItems(new Set(selectable.selectedItems));
    }
  }, [selectable, selectableConditionalDep]);
  var onItemSelect = selectable ? eventCallback : undefined;
  var onSortClick = (0, _react.useCallback)(function (column) {
    if (!sortable || !column.isSortable) {
      return;
    }

    var hash = column.hash;
    var sortDirection = sortable.direction === 'ASC' ? 'DESC' : 'ASC';

    if (typeof sortable.onSort === 'function') {
      sortable.onSort(hash, sortDirection, column);
    }
  }, [sortable]);
  var onDragEnd = (0, _react.useCallback)(function (result) {
    var destination = result.destination,
        source = result.source;

    if (!destination) {
      return;
    }

    if (destination.droppableId === source.droppableId && destination.index === source.index) {
      return;
    }

    if (typeof onRowDrop === 'function') {
      onRowDrop(source.index, destination.index);
    }
  }, [onRowDrop]);

  var shouldRenderActions = function shouldRenderActions() {
    return Boolean(actions) || Boolean(pagination) || Boolean(selectable) || Boolean(itemName);
  };

  var getItemKey = function getItemKey(item, index) {
    if (item[keyField] !== undefined) {
      return item[keyField];
    }

    return index;
  };

  var renderHeaders = function renderHeaders() {
    return /*#__PURE__*/_react.default.createElement(_Head.Head, {
      hidden: headerless
    }, /*#__PURE__*/_react.default.createElement("tr", null, typeof onRowDrop === 'function' && /*#__PURE__*/_react.default.createElement(_HeaderCell2.DragIconHeaderCell, {
      actionsRef: actionsRef
    }), isSelectable && /*#__PURE__*/_react.default.createElement(_HeaderCell2.HeaderCheckboxCell, {
      stickyHeader: stickyHeader,
      actionsRef: actionsRef
    }), columns.map(function (column, index) {
      var display = column.display,
          hash = column.hash,
          header = column.header,
          isSortable = column.isSortable,
          hideHeader = column.hideHeader;
      var isSorted = isSortable && sortable && hash === sortable.columnHash;
      var sortDirection = sortable && sortable.direction;
      return /*#__PURE__*/_react.default.createElement(_HeaderCell.HeaderCell, {
        display: display,
        column: column,
        hide: hideHeader,
        isSorted: isSorted,
        key: index,
        onSortClick: onSortClick,
        sortDirection: sortDirection,
        stickyHeader: stickyHeader,
        actionsRef: actionsRef
      }, header);
    })));
  };

  var renderDroppableItems = function renderDroppableItems() {
    return /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Droppable, {
      droppableId: "".concat(uniqueTableId, "-bd-droppable")
    }, function (provided) {
      return /*#__PURE__*/_react.default.createElement(_Body.Body, (0, _extends2.default)({
        withFirstRowBorder: headerless,
        ref: provided.innerRef
      }, provided.droppableProps), items.map(function (item, index) {
        var key = getItemKey(item, index);
        var isSelected = selectedItems.has(item);
        return /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Draggable, {
          key: key,
          draggableId: String(key),
          index: index
        }, function (provided, snapshot) {
          return /*#__PURE__*/_react.default.createElement(_Row.Row, (0, _extends2.default)({
            isDragging: snapshot.isDragging
          }, provided.dragHandleProps, provided.draggableProps, {
            ref: provided.innerRef,
            columns: columns,
            isSelectable: isSelectable,
            isSelected: isSelected,
            item: item,
            onItemSelect: onItemSelect,
            showDragIcon: true
          }));
        });
      }), provided.placeholder);
    });
  };

  var renderItems = function renderItems() {
    return onRowDrop ? renderDroppableItems() : /*#__PURE__*/_react.default.createElement(_Body.Body, {
      withFirstRowBorder: headerless
    }, items.map(function (item, index) {
      var key = getItemKey(item, index);
      var isSelected = selectedItems.has(item);
      return /*#__PURE__*/_react.default.createElement(_Row.Row, {
        columns: columns,
        isSelectable: isSelectable,
        isSelected: isSelected,
        item: item,
        key: key,
        onItemSelect: onItemSelect
      });
    }));
  };

  var renderEmptyState = function renderEmptyState() {
    if (items.length === 0 && emptyComponent) {
      return emptyComponent;
    }

    return null;
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, shouldRenderActions() && /*#__PURE__*/_react.default.createElement(_Actions.Actions, {
    customActions: actions,
    pagination: pagination,
    onSelectionChange: selectable && selectable.onSelectionChange,
    selectedItems: selectedItems,
    items: items,
    itemName: itemName,
    tableId: tableIdRef.current,
    stickyHeader: stickyHeader,
    forwardedRef: actionsRef
  }), /*#__PURE__*/_react.default.createElement(_styled.StyledTable, (0, _extends2.default)({}, rest, {
    id: tableIdRef.current
  }), onRowDrop ? /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.DragDropContext, {
    onDragEnd: onDragEnd
  }, renderHeaders(), renderItems()) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderHeaders(), renderItems())), renderEmptyState());
};

var Table = (0, _utils.typedMemo)(InternalTable);
exports.Table = Table;
var TableFigure = /*#__PURE__*/(0, _react.memo)(function (props) {
  return /*#__PURE__*/_react.default.createElement(_styled.StyledTableFigure, props);
});
exports.TableFigure = TableFigure;