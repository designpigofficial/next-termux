"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TreeNode = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _bigDesignIcons = require("@bigcommerce/big-design-icons");

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../../utils");

var _private = require("../../Checkbox/private");

var _styled = require("../../Radio/styled");

var _useSelectedChildrenCount = require("../hooks/useSelectedChildrenCount");

var _styled2 = require("../styled");

var _Tree = require("../Tree");

var _styled3 = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var flexItemProps = {
  flexShrink: 0,
  marginLeft: 'xxSmall'
};

var InternalTreeNode = function InternalTreeNode(_ref) {
  var _selectable$selectedN;

  var children = _ref.children,
      icon = _ref.icon,
      label = _ref.label,
      value = _ref.value,
      id = _ref.id;

  var _useContext = (0, _react.useContext)(_Tree.TreeContext),
      disabledNodes = _useContext.disabledNodes,
      expandable = _useContext.expandable,
      focusable = _useContext.focusable,
      iconless = _useContext.iconless,
      onKeyDown = _useContext.onKeyDown,
      onNodeClick = _useContext.onNodeClick,
      selectable = _useContext.selectable;

  var nodeRef = (0, _react.useRef)(null);
  var selectableRef = (0, _react.useRef)(null);
  var isExpanded = expandable.expandedNodes.includes(id);
  var isSelected = selectable === null || selectable === void 0 ? void 0 : (_selectable$selectedN = selectable.selectedNodes) === null || _selectable$selectedN === void 0 ? void 0 : _selectable$selectedN.includes(id);
  var isDisabled = disabledNodes === null || disabledNodes === void 0 ? void 0 : disabledNodes.includes(id);
  var isSelectable = value !== undefined && (selectable === null || selectable === void 0 ? void 0 : selectable.type) !== undefined && !isDisabled;
  var selectedChildrenCount = (0, _useSelectedChildrenCount.useSelectedChildrenCount)({
    selectedNodes: selectable === null || selectable === void 0 ? void 0 : selectable.selectedNodes,
    children: children
  });
  (0, _react.useEffect)(function () {
    if (focusable.focusedNode === id && nodeRef.current !== document.activeElement && document.activeElement !== document.body) {
      var _nodeRef$current;

      (_nodeRef$current = nodeRef.current) === null || _nodeRef$current === void 0 ? void 0 : _nodeRef$current.focus();
    }
  }, [focusable, id]); // Could be multiple elements in which are clicked.
  // Typing to generic Element type since all other elements extend from it.

  var handleNodeToggle = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(e) {
      var _selectableRef$curren;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!((e === null || e === void 0 ? void 0 : e.target) instanceof Node && (_selectableRef$curren = selectableRef.current) !== null && _selectableRef$curren !== void 0 && _selectableRef$curren.contains(e === null || e === void 0 ? void 0 : e.target) || children === undefined)) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              if (typeof expandable.onToggle === 'function') {
                expandable.onToggle(id, isExpanded);
              }

              if (isExpanded) {
                if (typeof expandable.onCollapse === 'function') {
                  expandable.onCollapse(id);
                }
              } else {
                if (typeof expandable.onExpand === 'function') {
                  expandable.onExpand(id);
                }
              }

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [children, id, expandable, isExpanded]);
  var handleNodeSelected = (0, _react.useCallback)(function () {
    if (!isSelectable) {
      return;
    }

    if (typeof (selectable === null || selectable === void 0 ? void 0 : selectable.onSelect) === 'function') {
      selectable.onSelect(id, value);
    }
  }, [id, isSelectable, selectable, value]);
  var handleKeyEvent = (0, _react.useCallback)(function (e) {
    if (e.altKey || e.currentTarget !== e.target) {
      return;
    }

    onKeyDown(e, {
      id: id,
      isExpanded: isExpanded,
      isSelectable: isSelectable,
      hasChildren: !!(children !== null && children !== void 0 && children.length),
      value: value
    });
  }, [children, id, isExpanded, isSelectable, onKeyDown, value]);
  var handleNodeClick = (0, _react.useCallback)(function (e) {
    // Prevents event bubbling
    e.stopPropagation();

    if (typeof focusable.onFocus === 'function') {
      focusable.onFocus(id);
    }

    if (typeof onNodeClick === 'function') {
      onNodeClick(e, id);
    }
  }, [focusable, id, onNodeClick]);
  var additionalProps = (0, _react.useMemo)(function () {
    return selectable !== null && selectable !== void 0 && selectable.type ? {
      'aria-selected': isSelected
    } : {};
  }, [selectable, isSelected]);
  var renderedArrow = (0, _react.useMemo)(function () {
    return children ? /*#__PURE__*/_react.default.createElement(_styled3.StyledArrowWrapper, {
      expanded: isExpanded,
      flexShrink: 0
    }, /*#__PURE__*/_react.default.createElement(_bigDesignIcons.ChevronRightIcon, {
      color: "secondary60",
      focusable: false,
      size: "xLarge"
    })) : /*#__PURE__*/_react.default.createElement(_styled3.StyledGap, null);
  }, [children, isExpanded]);
  var renderedChildren = (0, _react.useMemo)(function () {
    return children && /*#__PURE__*/_react.default.createElement(_styled2.StyledUl, {
      role: "group",
      show: isExpanded
    }, children === null || children === void 0 ? void 0 : children.map(function (child, index) {
      return /*#__PURE__*/_react.default.createElement(TreeNode, (0, _extends2.default)({}, child, {
        key: index
      }));
    }));
  }, [children, isExpanded]);
  var renderedIcon = (0, _react.useMemo)(function () {
    if (iconless) {
      return null;
    }

    return icon ? /*#__PURE__*/_react.default.createElement(_styled3.StyledFlexItem, flexItemProps, icon) : /*#__PURE__*/_react.default.createElement(_styled3.StyledFlexItem, flexItemProps, /*#__PURE__*/_react.default.createElement(_bigDesignIcons.FolderIcon, {
      color: isDisabled ? 'primary20' : 'primary30',
      size: "xLarge"
    }));
  }, [isDisabled, icon, iconless]);
  var renderedSelectable = (0, _react.useMemo)(function () {
    if (value === undefined || !(selectable !== null && selectable !== void 0 && selectable.type)) {
      return null;
    }

    if ((selectable === null || selectable === void 0 ? void 0 : selectable.type) === 'radio') {
      return /*#__PURE__*/_react.default.createElement(_styled3.StyledSelectableWrapper, flexItemProps, /*#__PURE__*/_react.default.createElement(_styled.StyledRadio, {
        "aria-hidden": true,
        checked: isSelected,
        disabled: isDisabled,
        onClick: handleNodeSelected,
        ref: selectableRef
      }));
    }

    if ((selectable === null || selectable === void 0 ? void 0 : selectable.type) === 'multi') {
      return /*#__PURE__*/_react.default.createElement(_styled3.StyledSelectableWrapper, flexItemProps, /*#__PURE__*/_react.default.createElement(_private.StyledCheckbox, {
        "aria-hidden": true,
        checked: isSelected,
        disabled: isDisabled,
        onClick: handleNodeSelected,
        ref: selectableRef
      }, isSelected ? /*#__PURE__*/_react.default.createElement(_bigDesignIcons.CheckIcon, null) : null));
    }
  }, [isDisabled, handleNodeSelected, isSelected, selectable, value]);
  return (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_styled3.StyledLi, (0, _extends2.default)({
      "aria-expanded": isExpanded,
      onClick: handleNodeClick,
      onKeyDown: handleKeyEvent,
      ref: nodeRef,
      role: "treeitem",
      tabIndex: focusable.focusedNode === id ? 0 : -1
    }, additionalProps), /*#__PURE__*/_react.default.createElement(_styled3.StyledFlex, {
      alignItems: "center",
      flexDirection: "row",
      onClick: handleNodeToggle,
      selected: isSelected
    }, renderedArrow, renderedSelectable, renderedIcon, /*#__PURE__*/_react.default.createElement(_styled3.StyledText, {
      as: "span",
      ellipsis: true,
      marginLeft: "xxSmall",
      color: isDisabled ? 'secondary50' : 'secondary70'
    }, label, selectedChildrenCount ? /*#__PURE__*/_react.default.createElement(_styled3.StyledText, {
      as: "span",
      color: "primary"
    }, ' ', "(", selectedChildrenCount, ")") : null)), renderedChildren);
  }, [additionalProps, handleKeyEvent, handleNodeClick, handleNodeToggle, id, isDisabled, isExpanded, isSelected, focusable, label, renderedArrow, renderedChildren, renderedSelectable, renderedIcon, selectedChildrenCount]);
};

var TreeNode = (0, _utils.typedMemo)(InternalTreeNode);
exports.TreeNode = TreeNode;