"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNodeMap = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getParentId = function getParentId(nodeMap, id) {
  var iterator = nodeMap.entries();

  var _iterator = _createForOfIteratorHelper(iterator),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          value = _step$value[1];

      if (value.children && value.children.includes(id)) {
        return value.id;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};

var buildNodeMap = function buildNodeMap(_ref) {
  var nodes = _ref.nodes,
      nodeMap = _ref.nodeMap;

  if (!nodes || nodes.length < 1) {
    return nodeMap;
  }

  return nodes.reduce(function (acc, node) {
    var _node$children$map, _node$children;

    var parent = getParentId(acc, node.id);
    acc.set(node.id, {
      children: (_node$children$map = (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.map(function (child) {
        return child.id;
      })) !== null && _node$children$map !== void 0 ? _node$children$map : [],
      id: node.id,
      parent: parent
    });

    if (node.children && node.children.length > 0) {
      return buildNodeMap({
        nodes: node.children,
        nodeMap: acc
      });
    }

    return acc;
  }, nodeMap);
};

var useNodeMap = function useNodeMap(_ref2) {
  var nodes = _ref2.nodes;
  return (0, _react.useMemo)(function () {
    return buildNodeMap({
      nodes: nodes,
      nodeMap: new Map()
    });
  }, [nodes]);
};

exports.useNodeMap = useNodeMap;