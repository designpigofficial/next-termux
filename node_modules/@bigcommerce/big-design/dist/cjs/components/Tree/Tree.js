"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = exports.TreeContext = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _styled = require("./styled");

var _TreeNode = require("./TreeNode");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// We don't have access to the type yet, so we need to pass any into the generic.
var TreeContext = /*#__PURE__*/(0, _react.createContext)({
  expandable: {
    expandedNodes: []
  },
  focusable: {
    focusedNode: '',
    onFocus: function onFocus() {
      return null;
    }
  },
  onKeyDown: function onKeyDown() {
    return null;
  }
});
exports.TreeContext = TreeContext;

var Tree = function Tree(_ref) {
  var disabledNodes = _ref.disabledNodes,
      expandable = _ref.expandable,
      focusable = _ref.focusable,
      iconless = _ref.iconless,
      id = _ref.id,
      nodes = _ref.nodes,
      onKeyDown = _ref.onKeyDown,
      onNodeClick = _ref.onNodeClick,
      selectable = _ref.selectable;
  var initialTreeContext = {
    disabledNodes: disabledNodes,
    expandable: expandable,
    focusable: focusable,
    iconless: iconless,
    onKeyDown: onKeyDown,
    onNodeClick: onNodeClick,
    selectable: selectable
  };
  var renderedItems = (0, _react.useMemo)(function () {
    return nodes.map(function (node, index) {
      return /*#__PURE__*/_react.default.createElement(_TreeNode.TreeNode, (0, _extends2.default)({}, node, {
        key: index
      }));
    });
  }, [nodes]);
  return /*#__PURE__*/_react.default.createElement(TreeContext.Provider, {
    value: initialTreeContext
  }, /*#__PURE__*/_react.default.createElement(_styled.StyledUl, {
    id: id,
    role: "tree",
    "aria-multiselectable": (selectable === null || selectable === void 0 ? void 0 : selectable.type) === 'multi',
    style: {
      overflow: 'hidden'
    }
  }, renderedItems));
};

exports.Tree = Tree;