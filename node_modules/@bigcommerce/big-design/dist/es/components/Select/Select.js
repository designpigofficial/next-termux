import _extends from "@babel/runtime/helpers/esm/extends";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["action", "autoComplete", "autoWidth", "className", "disabled", "filterable", "id", "inputRef", "label", "labelId", "maxHeight", "onClose", "onOpen", "onOptionChange", "options", "placeholder", "placement", "positionFixed", "required", "style", "value"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useCombobox } from 'downshift';
import React, { cloneElement, createRef, isValidElement, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { usePopper } from 'react-popper';
import { useUniqueId } from '../../hooks';
import { typedMemo, warning } from '../../utils';
import { Box } from '../Box';
import { FormControlLabel } from '../Form';
import { Input } from '../Input';
import { List } from '../List';
import { DropdownButton, StyledDropdownIcon, StyledInputContainer } from '../Select/styled';
export var Select = typedMemo(function (_ref) {
  var action = _ref.action,
      _ref$autoComplete = _ref.autoComplete,
      autoComplete = _ref$autoComplete === void 0 ? 'off' : _ref$autoComplete,
      _ref$autoWidth = _ref.autoWidth,
      autoWidth = _ref$autoWidth === void 0 ? false : _ref$autoWidth,
      className = _ref.className,
      disabled = _ref.disabled,
      _ref$filterable = _ref.filterable,
      filterable = _ref$filterable === void 0 ? true : _ref$filterable,
      id = _ref.id,
      inputRef = _ref.inputRef,
      label = _ref.label,
      labelId = _ref.labelId,
      maxHeight = _ref.maxHeight,
      onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      onOptionChange = _ref.onOptionChange,
      options = _ref.options,
      placeholder = _ref.placeholder,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,
      _ref$positionFixed = _ref.positionFixed,
      positionFixed = _ref$positionFixed === void 0 ? false : _ref$positionFixed,
      required = _ref.required,
      style = _ref.style,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  var defaultRef = /*#__PURE__*/createRef();
  var selectUniqueId = useUniqueId('select');

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var flattenOptions = useCallback(function (options) {
    var isGroups = function isGroups(options) {
      return options.every(function (option) {
        return 'options' in option && !('value' in option);
      });
    };

    return isGroups(options) ? options.map(function (group) {
      return group.options;
    }).reduce(function (acum, curr) {
      return acum.concat(curr);
    }, []) : options;
  }, []); // We need to pass Downshift only options without groups for accessibility tracking

  var flattenedOptions = useMemo(function () {
    return action ? [].concat(_toConsumableArray(flattenOptions(options)), [action]) : flattenOptions(options);
  }, [action, flattenOptions, options]); // Find the selected option

  var selectedOption = useMemo(function () {
    return flattenedOptions.find(function (option) {
      return 'value' in option && option.value === value;
    });
  }, [flattenedOptions, value]); // Initialize with flattened options

  var _useState3 = useState(flattenedOptions),
      _useState4 = _slicedToArray(_useState3, 2),
      filteredOptions = _useState4[0],
      setFilteredOptions = _useState4[1]; // Need to set select options if options prop changes


  useEffect(function () {
    return setFilteredOptions(flattenedOptions);
  }, [flattenedOptions]);

  var handleOnSelectedItemChange = function handleOnSelectedItemChange(changes) {
    if (action && changes.selectedItem && changes.selectedItem.content === action.content) {
      action.onActionClick(inputValue || null);
    } else if (changes.selectedItem && 'value' in changes.selectedItem && typeof onOptionChange === 'function') {
      onOptionChange(changes.selectedItem.value, changes.selectedItem);
    }
  };

  var handleOnInputValueChange = function handleOnInputValueChange(_ref2) {
    var inputValue = _ref2.inputValue,
        isOpen = _ref2.isOpen;

    // Filter only when List is open
    if (filterable && isOpen === true) {
      setFilteredOptions(filterOptions(inputValue));
    }

    setInputValue(inputValue || '');
  };

  var filterOptions = function filterOptions() {
    var inputVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return flattenedOptions.filter(function (option) {
      return option.content === (action && action.content) || option.content.toLowerCase().startsWith(inputVal.trim().toLowerCase());
    });
  };

  var handleOnIsOpenChange = function handleOnIsOpenChange(_ref3) {
    var isOpen = _ref3.isOpen;

    if (filterable && !isOpen) {
      // Reset the options when the List is closed
      setFilteredOptions(flattenedOptions);
    }

    if (isOpen && typeof onOpen === 'function') {
      onOpen();
    }

    if (!isOpen && typeof onClose === 'function') {
      onClose();
    }
  };

  var handleStateReducer = function handleStateReducer(_state, actionAndChanges) {
    switch (actionAndChanges.type) {
      case useCombobox.stateChangeTypes.InputBlur:
        return _objectSpread(_objectSpread({}, actionAndChanges.changes), {}, {
          inputValue: selectedOption ? selectedOption.content : ''
        });

      default:
        return actionAndChanges.changes;
    }
  };

  var _useCombobox = useCombobox({
    id: selectUniqueId,
    inputId: id,
    inputValue: inputValue,
    itemToString: function itemToString(item) {
      return item ? item.content : '';
    },
    items: filteredOptions,
    labelId: labelId,
    onInputValueChange: handleOnInputValueChange,
    onIsOpenChange: handleOnIsOpenChange,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: selectedOption || null,
    stateReducer: handleStateReducer
  }),
      closeMenu = _useCombobox.closeMenu,
      getComboboxProps = _useCombobox.getComboboxProps,
      getInputProps = _useCombobox.getInputProps,
      getItemProps = _useCombobox.getItemProps,
      getLabelProps = _useCombobox.getLabelProps,
      getMenuProps = _useCombobox.getMenuProps,
      getToggleButtonProps = _useCombobox.getToggleButtonProps,
      highlightedIndex = _useCombobox.highlightedIndex,
      isOpen = _useCombobox.isOpen,
      openMenu = _useCombobox.openMenu,
      selectedItem = _useCombobox.selectedItem; // Popper


  var referenceRef = useRef(null);
  var popperRef = useRef(null);

  var _usePopper = usePopper(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: 'eventListeners',
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 4]
      }
    }],
    strategy: positionFixed ? 'fixed' : 'absolute',
    placement: placement
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      update = _usePopper.update;

  var setCallbackRef = useCallback(function (ref) {
    if (typeof inputRef === 'function') {
      inputRef(ref);
    }
  }, [inputRef]);
  var getInputRef = useCallback(function () {
    if (inputRef && _typeof(inputRef) === 'object') {
      return inputRef;
    } else if (typeof inputRef === 'function') {
      return setCallbackRef;
    }

    return defaultRef;
  }, [defaultRef, inputRef, setCallbackRef]);
  var renderLabel = useMemo(function () {
    if (!label) {
      return null;
    }

    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(FormControlLabel, _extends({}, getLabelProps(), {
        renderOptional: !required
      }), label);
    }

    if ( /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {
      return /*#__PURE__*/cloneElement(label, getLabelProps());
    }

    warning('label must be either a string or a FormControlLabel component.');
  }, [getLabelProps, label, required]);
  var renderToggle = useMemo(function () {
    return /*#__PURE__*/React.createElement(DropdownButton, _extends({}, getToggleButtonProps({
      disabled: disabled,
      type: 'button'
    }), {
      "aria-label": "toggle menu",
      variant: "subtle"
    }), /*#__PURE__*/React.createElement(StyledDropdownIcon, null));
  }, [disabled, getToggleButtonProps]);
  var renderInput = useMemo(function () {
    return /*#__PURE__*/React.createElement(StyledInputContainer, {
      ref: referenceRef
    }, /*#__PURE__*/React.createElement(Input, _extends({}, getInputProps(_objectSpread(_objectSpread({}, props), {}, {
      autoComplete: autoComplete,
      disabled: disabled,
      onClick: function onClick() {
        !isOpen && openMenu();
      },
      onFocus: function onFocus(event) {
        !isOpen && openMenu();

        if (typeof props.onFocus === 'function') {
          props.onFocus(event);
        }
      },
      onKeyDown: function onKeyDown(event) {
        switch (event.key) {
          case 'Enter':
            event.preventDefault();

            if (isOpen === false) {
              openMenu(); // https://github.com/downshift-js/downshift/issues/734

              event.nativeEvent.preventDownshiftDefault = true;
            }

            break;

          case 'Escape':
            if (isOpen === false) {
              // Reset the value to empty
              onOptionChange();
            } else {
              closeMenu();
            } // https://github.com/downshift-js/downshift/issues/734


            event.nativeEvent.preventDownshiftDefault = true;
            break;
        }
      },
      placeholder: placeholder,
      ref: getInputRef(),
      readOnly: !filterable,
      required: required
    })), {
      iconLeft: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.icon,
      iconRight: renderToggle
    })));
  }, [autoComplete, closeMenu, disabled, filterable, getInputProps, getInputRef, isOpen, onOptionChange, openMenu, placeholder, props, renderToggle, required, selectedItem]);
  return /*#__PURE__*/React.createElement("div", null, renderLabel, /*#__PURE__*/React.createElement("div", getComboboxProps(), renderInput), /*#__PURE__*/React.createElement(Box, _extends({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), /*#__PURE__*/React.createElement(List, {
    action: action,
    autoWidth: autoWidth,
    filteredItems: filteredOptions,
    getItemProps: getItemProps,
    getMenuProps: getMenuProps,
    highlightedIndex: highlightedIndex,
    isOpen: isOpen,
    items: options,
    maxHeight: maxHeight,
    selectedItem: selectedItem && 'value' in selectedItem ? selectedItem : null,
    update: update
  })));
});