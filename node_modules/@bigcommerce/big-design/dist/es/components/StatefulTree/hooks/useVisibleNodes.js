import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { useEffect, useState } from 'react';

var recursiveSearch = function recursiveSearch(_ref) {
  var nodes = _ref.nodes,
      expandedNodes = _ref.expandedNodes,
      nodeMap = _ref.nodeMap;
  return nodes.reduce(function (acc, id) {
    if (expandedNodes.includes(id)) {
      var _nodeMap$get;

      var children = (_nodeMap$get = nodeMap.get(id)) === null || _nodeMap$get === void 0 ? void 0 : _nodeMap$get.children;

      if (children) {
        var visibleChildren = recursiveSearch({
          nodes: children,
          expandedNodes: expandedNodes,
          nodeMap: nodeMap
        });
        return acc.includes(id) ? [].concat(_toConsumableArray(acc), _toConsumableArray(visibleChildren)) : [].concat(_toConsumableArray(acc), [id], _toConsumableArray(visibleChildren));
      }
    }

    return [].concat(_toConsumableArray(acc), [id]);
  }, []);
};

var buildVisibleNodes = function buildVisibleNodes(_ref2) {
  var expandedNodes = _ref2.expandedNodes,
      nodeMap = _ref2.nodeMap;
  var entries = Array.from(nodeMap.entries());
  var parentNodes = entries.filter(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        value = _ref4[1];

    return value.parent === undefined;
  }, []).map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
        id = _ref6[0];

    return id;
  });
  return recursiveSearch({
    nodes: parentNodes,
    expandedNodes: expandedNodes,
    nodeMap: nodeMap
  });
};

export var useVisibleNodes = function useVisibleNodes(_ref7) {
  var expandedNodes = _ref7.expandedNodes,
      nodeMap = _ref7.nodeMap;

  var _useState = useState(function () {
    return buildVisibleNodes({
      expandedNodes: expandedNodes,
      nodeMap: nodeMap
    });
  }),
      _useState2 = _slicedToArray(_useState, 2),
      visibleNodes = _useState2[0],
      setVisibleNodes = _useState2[1];

  useEffect(function () {
    setVisibleNodes(buildVisibleNodes({
      expandedNodes: expandedNodes,
      nodeMap: nodeMap
    }));
  }, [expandedNodes, nodeMap]);
  return {
    visibleNodes: visibleNodes
  };
};