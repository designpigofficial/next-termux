import React from 'react';
import { typedMemo } from '../../utils';
import { Tree, useNodeMap, useTreeKeyEvents } from '../Tree';
import { useExpandable, useFocusable, useSelectable, useVisibleNodes } from './hooks';

var InternalStatefulTree = function InternalStatefulTree(_ref) {
  var _ref$nodes = _ref.nodes,
      nodes = _ref$nodes === void 0 ? [] : _ref$nodes,
      defaultExpanded = _ref.defaultExpanded,
      defaultSelected = _ref.defaultSelected,
      _ref$disabledNodes = _ref.disabledNodes,
      disabledNodes = _ref$disabledNodes === void 0 ? [] : _ref$disabledNodes,
      onNodeClick = _ref.onNodeClick,
      onExpandedChange = _ref.onExpandedChange,
      onSelectionChange = _ref.onSelectionChange,
      type = _ref.selectable;

  var _useFocusable = useFocusable({
    nodes: nodes,
    type: type,
    defaultSelected: defaultSelected
  }),
      focusedNode = _useFocusable.focusedNode,
      onFocus = _useFocusable.onFocus;

  var _useExpandable = useExpandable({
    defaultExpanded: defaultExpanded,
    onExpandedChange: onExpandedChange
  }),
      expandedNodes = _useExpandable.expandedNodes,
      onToggle = _useExpandable.onToggle;

  var _useSelectable = useSelectable({
    defaultSelected: defaultSelected,
    disabledNodes: disabledNodes,
    nodes: nodes,
    onSelectionChange: onSelectionChange,
    type: type
  }),
      selectedNodes = _useSelectable.selectedNodes,
      onSelect = _useSelectable.onSelect;

  var nodeMap = useNodeMap({
    nodes: nodes
  });

  var _useVisibleNodes = useVisibleNodes({
    expandedNodes: expandedNodes,
    nodeMap: nodeMap
  }),
      visibleNodes = _useVisibleNodes.visibleNodes;

  var onKeyDown = useTreeKeyEvents({
    onFocus: onFocus,
    onSelect: onSelect,
    onToggle: onToggle,
    nodeMap: nodeMap,
    visibleNodes: visibleNodes
  });
  return /*#__PURE__*/React.createElement(Tree, {
    nodes: nodes,
    disabledNodes: disabledNodes,
    expandable: {
      expandedNodes: expandedNodes,
      onToggle: onToggle
    },
    focusable: {
      focusedNode: focusedNode,
      onFocus: onFocus
    },
    onKeyDown: onKeyDown,
    onNodeClick: onNodeClick,
    selectable: {
      selectedNodes: selectedNodes,
      onSelect: onSelect,
      type: type
    }
  });
};

export var StatefulTree = typedMemo(InternalStatefulTree);