import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
var _excluded = ["columns", "defaultSelected", "itemName", "items", "keyField", "onSelectionChange", "onRowDrop", "search", "pagination", "filters", "selectable", "stickyHeader"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useCallback, useEffect, useMemo, useReducer } from 'react';
import { useDidUpdate } from '../../hooks';
import { typedMemo } from '../../utils';
import { Box } from '../Box';
import { PillTabs } from '../PillTabs';
import { Search } from '../Search';
import { Table } from '../Table';
import { createReducer, createReducerInit } from './reducer';

var swapArrayElements = function swapArrayElements(array, sourceIndex, destinationIndex) {
  var smallerIndex = Math.min(sourceIndex, destinationIndex);
  var largerIndex = Math.max(sourceIndex, destinationIndex);
  return [].concat(_toConsumableArray(array.slice(0, smallerIndex)), _toConsumableArray(sourceIndex < destinationIndex ? array.slice(smallerIndex + 1, largerIndex + 1) : []), [array[sourceIndex]], _toConsumableArray(sourceIndex > destinationIndex ? array.slice(smallerIndex, largerIndex) : []), _toConsumableArray(array.slice(largerIndex + 1)));
};

var InternalStatefulTable = function InternalStatefulTable(_ref) {
  var _ref$columns = _ref.columns,
      columns = _ref$columns === void 0 ? [] : _ref$columns,
      _ref$defaultSelected = _ref.defaultSelected,
      defaultSelected = _ref$defaultSelected === void 0 ? [] : _ref$defaultSelected,
      itemName = _ref.itemName,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      keyField = _ref.keyField,
      onSelectionChange = _ref.onSelectionChange,
      onRowDrop = _ref.onRowDrop,
      search = _ref.search,
      _ref$pagination = _ref.pagination,
      pagination = _ref$pagination === void 0 ? false : _ref$pagination,
      filters = _ref.filters,
      _ref$selectable = _ref.selectable,
      selectable = _ref$selectable === void 0 ? false : _ref$selectable,
      _ref$stickyHeader = _ref.stickyHeader,
      stickyHeader = _ref$stickyHeader === void 0 ? false : _ref$stickyHeader,
      rest = _objectWithoutProperties(_ref, _excluded);

  var reducer = useMemo(function () {
    return createReducer();
  }, []);
  var reducerInit = useMemo(function () {
    return createReducerInit();
  }, []);
  var sortable = useMemo(function () {
    return columns.some(function (column) {
      return column.sortKey || column.sortFn;
    });
  }, [columns]);

  var _useReducer = useReducer(reducer, {
    columns: columns,
    defaultSelected: defaultSelected,
    items: items,
    pagination: pagination,
    filters: filters,
    search: search
  }, reducerInit),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var columnsChangedCallback = useCallback(function () {
    return dispatch({
      type: 'COLUMNS_CHANGED',
      columns: columns
    });
  }, [columns]);
  var itemsChangedCallback = useCallback(function () {
    return dispatch({
      type: 'ITEMS_CHANGED',
      items: items,
      isPaginationEnabled: pagination
    });
  }, [items, pagination]);
  useDidUpdate(columnsChangedCallback);
  useDidUpdate(itemsChangedCallback);
  var onPageChange = useCallback(function (page) {
    return dispatch({
      type: 'PAGE_CHANGE',
      page: page
    });
  }, []);
  var onItemsPerPageChange = useCallback(function (itemsPerPage) {
    return dispatch({
      type: 'ITEMS_PER_PAGE_CHANGE',
      itemsPerPage: itemsPerPage
    });
  }, []);
  var onItemSelect = useCallback(function (selectedItems) {
    dispatch({
      type: 'SELECTED_ITEMS',
      selectedItems: selectedItems
    });

    if (typeof onSelectionChange === 'function') {
      onSelectionChange(selectedItems);
    }
  }, [onSelectionChange]);
  var onSort = useCallback(function (_columnHash, direction, column) {
    dispatch({
      type: 'SORT',
      column: column,
      direction: direction
    });
  }, []);
  var paginationOptions = useMemo(function () {
    return pagination ? _objectSpread(_objectSpread({}, state.pagination), {}, {
      onItemsPerPageChange: onItemsPerPageChange,
      onPageChange: onPageChange
    }) : undefined;
  }, [pagination, state.pagination, onItemsPerPageChange, onPageChange]);
  var selectableOptions = useMemo(function () {
    return selectable ? {
      selectedItems: state.selectedItems,
      onSelectionChange: onItemSelect
    } : undefined;
  }, [selectable, state.selectedItems, onItemSelect]);
  var sortableOptions = useMemo(function () {
    return sortable ? _objectSpread(_objectSpread({}, state.sortable), {}, {
      onSort: onSort
    }) : undefined;
  }, [sortable, state.sortable, onSort]);
  var onDragEnd = useCallback(function (from, to) {
    var updatedItems = swapArrayElements(state.currentItems, from, to);
    dispatch({
      type: 'ITEMS_CHANGED',
      items: updatedItems,
      isPaginationEnabled: pagination
    });

    if (typeof onRowDrop === 'function') {
      onRowDrop(updatedItems);
    }
  }, [state.currentItems, onRowDrop, pagination]);
  useEffect(function () {
    if (!filters) {
      return;
    }

    var pillTabsProps = {
      activePills: state.activePills,
      onPillClick: function onPillClick(pillId) {
        dispatch({
          type: 'TOGGLE_PILL',
          pillId: pillId,
          filter: filters.filter
        });
      },
      items: filters.pillTabs
    };
    dispatch({
      type: 'SET_PILL_TABS_PROPS',
      pillTabsProps: pillTabsProps
    });
  }, [filters, state.activePills, search]);
  var searchProps = useMemo(function () {
    return search ? {
      value: state.searchValue,
      onChange: function onChange(e) {
        return dispatch({
          type: 'SEARCH_VALUE_CHANGE',
          value: e.target.value
        });
      },
      onSubmit: function onSubmit() {
        return dispatch({
          type: 'ON_SEARCH_SUBMIT',
          filterPills: filters === null || filters === void 0 ? void 0 : filters.filter
        });
      }
    } : undefined;
  }, [search, state.searchValue, filters]);

  var renderPills = function renderPills() {
    if (!filters || !state.pillTabsProps) {
      return null;
    }

    return /*#__PURE__*/React.createElement(Box, {
      marginBottom: "medium"
    }, /*#__PURE__*/React.createElement(PillTabs, state.pillTabsProps));
  };

  var renderSearch = function renderSearch() {
    if (!search || !searchProps) {
      return;
    }

    return /*#__PURE__*/React.createElement(Box, {
      marginBottom: "medium"
    }, /*#__PURE__*/React.createElement(Search, searchProps));
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, renderPills(), renderSearch(), /*#__PURE__*/React.createElement(Table, _extends({}, rest, {
    columns: state.columns,
    itemName: itemName,
    items: state.currentItems,
    keyField: keyField,
    pagination: paginationOptions,
    selectable: selectableOptions,
    sortable: sortableOptions,
    stickyHeader: stickyHeader,
    onRowDrop: onRowDrop ? onDragEnd : undefined
  })));
};

export var StatefulTable = typedMemo(InternalStatefulTable);