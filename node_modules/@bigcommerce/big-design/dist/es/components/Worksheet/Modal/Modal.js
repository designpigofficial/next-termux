import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { typedMemo } from '../../../utils';
import { Modal } from '../../Modal';
import { useStore, useTableFocus, useUpdateItems } from '../hooks';

var InternalWorksheetModal = function InternalWorksheetModal(_ref) {
  var column = _ref.column;
  var config = column.config,
      hash = column.hash;
  var header = config.header,
      render = config.render,
      _config$saveActionTex = config.saveActionText,
      saveActionText = _config$saveActionTex === void 0 ? 'Save' : _config$saveActionTex,
      _config$cancelActionT = config.cancelActionText,
      cancelActionText = _config$cancelActionT === void 0 ? 'Cancel' : _config$cancelActionT;
  var isModalOpen = useStore(useMemo(function () {
    return function (state) {
      return state.openedModal === hash;
    };
  }, [hash]));
  var selectedCell = useStore(useMemo(function () {
    return function (state) {
      return state.selectedCells[0];
    };
  }, []));
  var setOpenModal = useStore(function (state) {
    return state.setOpenModal;
  });
  var setEditingCell = useStore(function (state) {
    return state.setEditingCell;
  });

  var _useTableFocus = useTableFocus(),
      focusTable = _useTableFocus.focusTable;

  var _useUpdateItems = useUpdateItems(),
      updateItems = _useUpdateItems.updateItems;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      newValue = _useState2[0],
      setNewValue = _useState2[1];

  useEffect(function () {
    if (selectedCell) {
      setNewValue(selectedCell.value);
    }
  }, [selectedCell]);
  var handleClose = useCallback(function () {
    setOpenModal(null);
    setEditingCell(null);
    focusTable();
  }, [focusTable, setEditingCell, setOpenModal]);
  var handleSave = useCallback(function () {
    if (selectedCell && newValue !== null && newValue !== selectedCell.value) {
      updateItems([selectedCell], [newValue]);
    }

    handleClose();
  }, [handleClose, newValue, selectedCell, updateItems]);
  var renderedContent = useMemo(function () {
    var onChange = function onChange(newValue) {
      if (newValue !== undefined) {
        setNewValue(newValue);
      }
    };

    return selectedCell ? render(selectedCell.value, onChange) : null;
  }, [selectedCell, render]);
  return /*#__PURE__*/React.createElement(Modal, {
    actions: [{
      text: cancelActionText,
      variant: 'subtle',
      onClick: handleClose
    }, {
      text: saveActionText,
      onClick: handleSave
    }],
    closeOnClickOutside: false,
    closeOnEscKey: true,
    header: header,
    isOpen: isModalOpen,
    onClose: handleClose
  }, renderedContent);
};

export var WorksheetModal = typedMemo(InternalWorksheetModal);