import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React, { createRef, useEffect, useMemo } from 'react';
import { typedMemo } from '../../utils';
import { UpdateItemsProvider } from './context';
import { createStore, Provider, useKeyEvents, useStore } from './hooks';
import { WorksheetModal } from './Modal/Modal';
import { Row } from './Row';
import { Status } from './RowStatus/styled';
import { Header, Table } from './styled';
import { editedRows, invalidRows } from './utils';
var InternalWorksheet = typedMemo(function (_ref) {
  var columns = _ref.columns,
      expandableRows = _ref.expandableRows,
      items = _ref.items,
      onChange = _ref.onChange,
      onErrors = _ref.onErrors;
  var tableRef = /*#__PURE__*/createRef();
  var setRows = useStore(function (state) {
    return state.setRows;
  });
  var setColumns = useStore(function (state) {
    return state.setColumns;
  });
  var setExpandableRows = useStore(function (state) {
    return state.setExpandableRows;
  });
  var setTableRef = useStore(function (state) {
    return state.setTableRef;
  });
  var rows = useStore(useMemo(function () {
    return function (state) {
      return state.rows;
    };
  }, []));
  var editedCells = useStore(useMemo(function () {
    return function (state) {
      return state.editedCells;
    };
  }, []));
  var invalidCells = useStore(useMemo(function () {
    return function (state) {
      return state.invalidCells;
    };
  }, []));

  var _useKeyEvents = useKeyEvents(),
      handleKeyDown = _useKeyEvents.handleKeyDown; // Add a column for the toggle components


  var expandedColumns = useMemo(function () {
    return expandableRows ? [{
      hash: '',
      header: '',
      type: 'toggle'
    }].concat(_toConsumableArray(columns)) : columns;
  }, [columns, expandableRows]); // Create a new reference since state mutates rows to prevent unecessary rerendering

  useEffect(function () {
    return setRows(_toConsumableArray(items));
  }, [items, setRows]);
  useEffect(function () {
    return setColumns(expandedColumns);
  }, [expandedColumns, setColumns]);
  useEffect(function () {
    return setExpandableRows(expandableRows || {});
  }, [expandableRows, setExpandableRows]);
  useEffect(function () {
    return setTableRef(tableRef.current);
  }, [setTableRef, tableRef]);
  useEffect(function () {
    if (editedCells.length) {
      onChange(editedRows(editedCells, rows));
    }
  }, [editedCells, onChange, rows]);
  useEffect(function () {
    if (typeof onErrors === 'function' && invalidCells.length) {
      onErrors(invalidRows(invalidCells, rows));
    }
  }, [invalidCells, onErrors, rows]);
  var renderedHeaders = useMemo(function () {
    return /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement(Status, null), expandedColumns.map(function (column, index) {
      return /*#__PURE__*/React.createElement(Header, {
        key: index,
        columnType: column.type
      }, column.header);
    })));
  }, [expandedColumns]);
  var renderedRows = useMemo(function () {
    return /*#__PURE__*/React.createElement("tbody", null, rows.map(function (_row, rowIndex) {
      return /*#__PURE__*/React.createElement(Row, {
        columns: expandedColumns,
        key: rowIndex,
        rowIndex: rowIndex
      });
    }));
  }, [expandedColumns, rows]);
  var renderedModals = useMemo(function () {
    return expandedColumns.filter(function (column) {
      return column.type === 'modal';
    }).map(function (column, index) {
      return /*#__PURE__*/React.createElement(WorksheetModal, {
        column: column,
        key: index
      });
    });
  }, [expandedColumns]);
  return /*#__PURE__*/React.createElement(UpdateItemsProvider, {
    items: rows
  }, /*#__PURE__*/React.createElement(Table, {
    onKeyDown: handleKeyDown,
    ref: tableRef,
    tabIndex: 0
  }, renderedHeaders, renderedRows), renderedModals);
});
export var Worksheet = typedMemo(function (props) {
  return /*#__PURE__*/React.createElement(Provider, {
    createStore: createStore
  }, /*#__PURE__*/React.createElement(InternalWorksheet, props));
});