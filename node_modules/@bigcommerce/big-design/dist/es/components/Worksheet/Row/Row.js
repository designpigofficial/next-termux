import React, { useCallback, useMemo } from 'react';
import { typedMemo } from '../../../utils';
import { Cell } from '../Cell';
import { useStore } from '../hooks';
import { RowStatus } from '../RowStatus';
import { StyledTableRow } from './styled';

var InternalRow = function InternalRow(_ref) {
  var columns = _ref.columns,
      rowIndex = _ref.rowIndex;
  var row = useStore(useMemo(function () {
    return function (state) {
      return state.rows[rowIndex];
    };
  }, [rowIndex]));
  var expandableRows = useStore(useMemo(function () {
    return function (state) {
      return state.expandableRows;
    };
  }, []));
  var isExpanded = useStore(useMemo(function () {
    return function (state) {
      return !state.hiddenRows.includes(row.id);
    };
  }, [row.id]));
  var parentId = useMemo(function () {
    if (!expandableRows) {
      return;
    }

    var rowIds = Object.keys(expandableRows);
    return rowIds.find(function (rowId) {
      return expandableRows[rowId].find(function (childId) {
        return childId === row.id;
      });
    });
  }, [expandableRows, row.id]);
  var isChild = useMemo(function () {
    return parentId !== undefined;
  }, [parentId]);
  var hasFormatting = useCallback(function (column) {
    return column.type === 'text' || column.type === 'number' || column.type === 'modal';
  }, []);
  return /*#__PURE__*/React.createElement(StyledTableRow, {
    isChild: isChild,
    isExpanded: !isChild || isExpanded
  }, /*#__PURE__*/React.createElement(RowStatus, {
    rowIndex: rowIndex
  }), columns.map(function (column, columnIndex) {
    var _column$type;

    return /*#__PURE__*/React.createElement(Cell, {
      columnIndex: columnIndex,
      disabled: column.disabled,
      formatting: hasFormatting(column) ? column.formatting : undefined,
      hash: column.hash,
      key: "".concat(rowIndex, "-").concat(columnIndex),
      options: column.type === 'select' ? column.config.options : undefined,
      rowId: row.id,
      rowIndex: rowIndex,
      type: (_column$type = column.type) !== null && _column$type !== void 0 ? _column$type : 'text',
      validation: column.validation,
      value: row[column.hash]
    });
  }));
};

export var Row = typedMemo(InternalRow);