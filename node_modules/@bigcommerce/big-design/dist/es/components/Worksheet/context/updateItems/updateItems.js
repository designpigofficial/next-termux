import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { createContext, useCallback, useMemo } from 'react';
import { typedMemo } from '../../../../utils';
import { useStore } from '../../hooks';
export var UpdateItemsContext = /*#__PURE__*/createContext(null);
export var UpdateItemsProvider = typedMemo(function (_ref) {
  var children = _ref.children,
      items = _ref.items;
  var setRows = useStore(function (state) {
    return state.setRows;
  });
  var addEditedCells = useStore(function (state) {
    return state.addEditedCells;
  });
  var updateItems = useCallback(function (cells, newValues) {
    setRows(cells.reduce(function (accum, cell, index) {
      var hash = cell.hash,
          rowIndex = cell.rowIndex; // Don't change since value is the same

      if (cell.value === newValues[index]) {
        return accum;
      }

      var row = accum[rowIndex];

      var updatedRow = _objectSpread(_objectSpread({}, row), {}, _defineProperty({}, hash, newValues[index]));

      accum[rowIndex] = updatedRow;
      return accum;
    }, items));
    addEditedCells(cells.reduce(function (accum, cell, index) {
      // Don't add since value is the same
      if (cell.value === newValues[index]) {
        return accum;
      }

      return [].concat(_toConsumableArray(accum), [_objectSpread(_objectSpread({}, cell), {}, {
        value: newValues[index]
      })]);
    }, []));
  }, [addEditedCells, items, setRows]);
  var providerValue = useMemo(function () {
    return {
      updateItems: updateItems
    };
  }, [updateItems]);
  return /*#__PURE__*/React.createElement(UpdateItemsContext.Provider, {
    value: providerValue
  }, children);
});