import React, { createRef, useCallback, useEffect, useMemo } from 'react';
import { typedMemo } from '../../../../utils';
import { Flex } from '../../../Flex';
import { Small } from '../../../Typography';
import { useStore } from '../../hooks';
import { StyledButton, StyledFlexItem } from './styled';

var InternalModalEditor = function InternalModalEditor(_ref) {
  var cell = _ref.cell,
      formatting = _ref.formatting,
      isEditing = _ref.isEditing;
  var setOpenModal = useStore(function (state) {
    return state.setOpenModal;
  });
  var setEditingCell = useStore(function (state) {
    return state.setEditingCell;
  });
  var hash = cell.hash,
      value = cell.value;
  var buttonRef = /*#__PURE__*/createRef();
  useEffect(function () {
    if (isEditing) {
      setOpenModal(hash);
    }
  }, [hash, isEditing, setOpenModal]);
  var handleClick = useCallback(function () {
    setEditingCell(cell);
  }, [cell, setEditingCell]);
  var renderedValue = useMemo(function () {
    return formatting ? formatting(value) : "".concat(value);
  }, [formatting, value]);
  return /*#__PURE__*/React.createElement(Flex, {
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  }, /*#__PURE__*/React.createElement(StyledFlexItem, {
    paddingRight: "small",
    flexShrink: 1
  }, /*#__PURE__*/React.createElement(Small, {
    color: cell.disabled ? 'secondary50' : 'secondary70',
    ellipsis: true,
    title: renderedValue
  }, renderedValue)), /*#__PURE__*/React.createElement(StyledButton, {
    disabled: cell.disabled,
    onClick: handleClick,
    ref: buttonRef,
    variant: "subtle"
  }, "Edit"));
};

export var ModalEditor = typedMemo(InternalModalEditor);