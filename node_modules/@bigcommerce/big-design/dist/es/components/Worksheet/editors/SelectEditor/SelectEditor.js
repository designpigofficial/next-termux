import React, { createRef, useCallback, useEffect } from 'react';
import { typedMemo } from '../../../../utils';
import { Select } from '../../../Select';
import { useStore } from '../../hooks';
import { SelectWrapper } from './styled';

var InternalSelectEditor = function InternalSelectEditor(_ref) {
  var cell = _ref.cell,
      isEditing = _ref.isEditing,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options;
  var inputRef = /*#__PURE__*/createRef();
  var setEditingCell = useStore(function (state) {
    return state.setEditingCell;
  });
  useEffect(function () {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [inputRef, isEditing]);
  var handleChange = useCallback(function (value) {
    onChange(value);
  }, [onChange]);
  var handleOpen = useCallback(function () {
    setEditingCell(cell);
  }, [cell, setEditingCell]);
  var handleClose = useCallback(function () {
    onBlur();
    setEditingCell(null);
  }, [onBlur, setEditingCell]);
  return /*#__PURE__*/React.createElement(SelectWrapper, null, /*#__PURE__*/React.createElement(Select, {
    disabled: cell.disabled,
    filterable: false,
    inputRef: inputRef,
    onClose: handleClose,
    onOpen: handleOpen,
    onOptionChange: handleChange,
    options: options,
    value: cell.value
  }));
};

export var SelectEditor = typedMemo(InternalSelectEditor);