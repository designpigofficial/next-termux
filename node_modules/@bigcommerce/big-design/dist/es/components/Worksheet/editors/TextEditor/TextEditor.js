import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { typedMemo } from '../../../../utils';
import { StyledInput } from './styled';

var InternalTextEditor = function InternalTextEditor(_ref) {
  var cell = _ref.cell,
      isEdited = _ref.isEdited,
      onBlur = _ref.onBlur,
      onKeyDown = _ref.onKeyDown;

  var _useState = useState("".concat(cell.value)),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var handleChange = function handleChange(event) {
    setValue(event.target.value);
  };

  var handleKeyDown = function handleKeyDown(event) {
    // We always receive the value as a string type, cast to Number if column type is number
    onKeyDown(event, formatValue(value));
  };

  var formatValue = function formatValue(value) {
    return cell.type === 'number' && value !== '' ? Number(value) : value;
  };

  return /*#__PURE__*/React.createElement(StyledInput, {
    autoFocus: true,
    isEdited: isEdited,
    onBlur: onBlur,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    value: value
  });
};

export var TextEditor = typedMemo(InternalTextEditor);