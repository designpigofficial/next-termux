import { useCallback, useMemo } from 'react';
import { useStore } from '../useStore';
import { useTableFocus } from '../useTableFocus';
import { useUpdateItems } from '../useUpdateItems';
export var useEditableCell = function useEditableCell(cell) {
  var setEditingCell = useStore(function (state) {
    return state.setEditingCell;
  });

  var _useUpdateItems = useUpdateItems(),
      updateItems = _useUpdateItems.updateItems;

  var _useTableFocus = useTableFocus(),
      focusTable = _useTableFocus.focusTable;

  var isEditing = useStore(useMemo(function () {
    return function (_ref) {
      var editingCell = _ref.editingCell;
      return editingCell !== null && editingCell.columnIndex === cell.columnIndex && editingCell.rowIndex === cell.rowIndex;
    };
  }, [cell]));
  var restoreFocus = useCallback(function () {
    setEditingCell(null);
    focusTable();
  }, [focusTable, setEditingCell]);
  var handleDoubleClick = useCallback(function () {
    if (!cell.disabled) {
      setEditingCell(cell);
    }
  }, [cell, setEditingCell]);
  var handleBlur = useCallback(function () {
    restoreFocus();
  }, [restoreFocus]);
  var handleChange = useCallback(function (newValue) {
    updateItems([cell], [newValue]);
    restoreFocus();
  }, [cell, restoreFocus, updateItems]);
  var handleKeyDown = useCallback(function (event, newValue) {
    var key = event.key;

    switch (key) {
      case 'Enter':
        event.preventDefault(); // Only call updateItems if cells have new values

        if (cell.value !== newValue) {
          updateItems([cell], [newValue]);
        }

        restoreFocus();
        break;

      case 'Escape':
        event.preventDefault();
        restoreFocus();
        break;
    }
  }, [cell, restoreFocus, updateItems]);
  return useMemo(function () {
    return {
      handleBlur: handleBlur,
      handleChange: handleChange,
      handleDoubleClick: handleDoubleClick,
      handleKeyDown: handleKeyDown,
      isEditing: isEditing
    };
  }, [handleBlur, handleChange, handleDoubleClick, handleKeyDown, isEditing]);
};