import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { useCallback, useMemo } from 'react';
import { useStore } from './../';
export var useExpandable = function useExpandable(rowId) {
  var expandableRows = useStore(function (state) {
    return state.expandableRows;
  });
  var hiddenRows = useStore(function (state) {
    return state.hiddenRows;
  });
  var setHiddenRows = useStore(function (state) {
    return state.setHiddenRows;
  });
  var onExpand = useCallback(function () {
    var childIds = expandableRows[rowId];
    setHiddenRows(hiddenRows.filter(function (hiddenRow) {
      return !childIds.includes(hiddenRow);
    }));
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  var onCollapse = useCallback(function () {
    var childIds = expandableRows[rowId];
    setHiddenRows([].concat(_toConsumableArray(hiddenRows), _toConsumableArray(childIds)));
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  var onToggle = useCallback(function (isExpanded) {
    if (isExpanded) {
      onCollapse();
    } else {
      onExpand();
    }
  }, [onCollapse, onExpand]);
  var isExpandable = expandableRows !== null && expandableRows[rowId] !== undefined;
  var hasExpanded = isExpandable && !hiddenRows.some(function (row) {
    return expandableRows[rowId].includes(row);
  });
  return useMemo(function () {
    return {
      hasExpanded: hasExpanded,
      isExpandable: isExpandable,
      onToggle: onToggle
    };
  }, [hasExpanded, isExpandable, onToggle]);
};