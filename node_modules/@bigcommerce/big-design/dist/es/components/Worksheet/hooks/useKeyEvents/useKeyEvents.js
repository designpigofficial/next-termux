import { useCallback, useMemo } from 'react';
import { useNavigation } from '../useNavigation';
import { useStore } from '../useStore';
export var useKeyEvents = function useKeyEvents() {
  // Get the first cell of the selected values
  var selectedCell = useStore(useMemo(function () {
    return function (state) {
      return state.selectedCells[0];
    };
  }, []));
  var isEditing = useStore(useMemo(function () {
    return function (state) {
      return state.editingCell !== null;
    };
  }, []));
  var setEditingCell = useStore(function (state) {
    return state.setEditingCell;
  });

  var _useNavigation = useNavigation(selectedCell),
      navigate = _useNavigation.navigate;

  var editSelectedCell = useCallback(function () {
    if (selectedCell) {
      setEditingCell(selectedCell);
    }
  }, [selectedCell, setEditingCell]);
  var handleKeyDown = useCallback(function (event) {
    var key = event.key;

    if (isEditing) {
      switch (key) {
        case 'Enter':
          navigate({
            rowIndex: 1,
            columnIndex: 0
          });
          break;

        case 'Tab':
          navigate({
            rowIndex: 0,
            columnIndex: event.shiftKey ? -1 : 1
          });
          break;
      }
    } else {
      switch (key) {
        case 'Enter':
          if (selectedCell && !selectedCell.disabled) {
            editSelectedCell();

            if (selectedCell.type === 'checkbox') {
              navigate({
                rowIndex: 1,
                columnIndex: 0
              });
            }
          }

          break;

        case ' ':
          if (selectedCell && !selectedCell.disabled) {
            editSelectedCell();
          }

          break;

        case 'ArrowUp':
          navigate({
            rowIndex: -1,
            columnIndex: 0
          });
          break;

        case 'ArrowDown':
          navigate({
            rowIndex: 1,
            columnIndex: 0
          });
          break;

        case 'ArrowRight':
          navigate({
            rowIndex: 0,
            columnIndex: 1
          });
          break;

        case 'Tab':
          navigate({
            rowIndex: 0,
            columnIndex: event.shiftKey ? -1 : 1
          });
          break;

        case 'ArrowLeft':
          navigate({
            rowIndex: 0,
            columnIndex: -1
          });
          break;
      }

      event.preventDefault();
    }
  }, [editSelectedCell, isEditing, navigate, selectedCell]);
  return useMemo(function () {
    return {
      handleKeyDown: handleKeyDown
    };
  }, [handleKeyDown]);
};