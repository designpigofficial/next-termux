import _extends from "@babel/runtime/helpers/esm/extends";
import React, { createContext, useMemo } from 'react';
import { StyledUl } from './styled';
import { TreeNode } from './TreeNode';
// We don't have access to the type yet, so we need to pass any into the generic.
export var TreeContext = /*#__PURE__*/createContext({
  expandable: {
    expandedNodes: []
  },
  focusable: {
    focusedNode: '',
    onFocus: function onFocus() {
      return null;
    }
  },
  onKeyDown: function onKeyDown() {
    return null;
  }
});
export var Tree = function Tree(_ref) {
  var disabledNodes = _ref.disabledNodes,
      expandable = _ref.expandable,
      focusable = _ref.focusable,
      iconless = _ref.iconless,
      id = _ref.id,
      nodes = _ref.nodes,
      onKeyDown = _ref.onKeyDown,
      onNodeClick = _ref.onNodeClick,
      selectable = _ref.selectable;
  var initialTreeContext = {
    disabledNodes: disabledNodes,
    expandable: expandable,
    focusable: focusable,
    iconless: iconless,
    onKeyDown: onKeyDown,
    onNodeClick: onNodeClick,
    selectable: selectable
  };
  var renderedItems = useMemo(function () {
    return nodes.map(function (node, index) {
      return /*#__PURE__*/React.createElement(TreeNode, _extends({}, node, {
        key: index
      }));
    });
  }, [nodes]);
  return /*#__PURE__*/React.createElement(TreeContext.Provider, {
    value: initialTreeContext
  }, /*#__PURE__*/React.createElement(StyledUl, {
    id: id,
    role: "tree",
    "aria-multiselectable": (selectable === null || selectable === void 0 ? void 0 : selectable.type) === 'multi',
    style: {
      overflow: 'hidden'
    }
  }, renderedItems));
};