var getNextVisibleNode = function getNextVisibleNode(visibleNodeIds, id) {
  var index = visibleNodeIds.indexOf(id);

  if (index !== -1 && index + 1 < visibleNodeIds.length) {
    return visibleNodeIds[index + 1];
  }

  return id;
};

var getPreviousVisibleNode = function getPreviousVisibleNode(visibleNodeIds, id) {
  var index = visibleNodeIds.indexOf(id);

  if (index !== -1 && index - 1 >= 0) {
    return visibleNodeIds[index - 1];
  }

  return id;
};

export var useTreeKeyEvents = function useTreeKeyEvents(_ref) {
  var onFocus = _ref.onFocus,
      onSelect = _ref.onSelect,
      onToggle = _ref.onToggle,
      nodeMap = _ref.nodeMap,
      visibleNodes = _ref.visibleNodes;

  // Needs to handle the following keyboard events:
  // https://www.w3.org/TR/wai-aria-practices/#keyboard-interaction-22
  var onKeyDown = function onKeyDown(e, _ref2) {
    var _nodeMap$get;

    var id = _ref2.id,
        isExpanded = _ref2.isExpanded,
        isSelectable = _ref2.isSelectable,
        hasChildren = _ref2.hasChildren,
        value = _ref2.value;
    var key = e.key;

    if (e.altKey || e.currentTarget !== e.target) {
      return;
    }

    switch (key) {
      // Stopping propagation if inside a form
      case ' ':
        e.preventDefault();
        e.stopPropagation();

        if (isSelectable && onSelect) {
          onSelect(id, value);
        }

        break;

      case 'Enter':
        e.preventDefault();
        e.stopPropagation();

        if (hasChildren) {
          if (onToggle) {
            onToggle(id, isExpanded);
          }
        } else if (isSelectable && onSelect) {
          onSelect(id, value);
        }

        break;

      case 'ArrowDown':
        e.preventDefault();
        onFocus(getNextVisibleNode(visibleNodes, id));
        break;

      case 'ArrowUp':
        e.preventDefault();
        onFocus(getPreviousVisibleNode(visibleNodes, id));
        break;

      case 'ArrowRight':
        e.preventDefault();

        if (hasChildren) {
          if (isExpanded) {
            onFocus(getNextVisibleNode(visibleNodes, id));
          } else {
            if (onToggle) {
              onToggle(id, isExpanded);
            }
          }
        }

        break;

      case 'ArrowLeft':
        e.preventDefault();

        if (hasChildren) {
          if (isExpanded) {
            if (onToggle) {
              onToggle(id, isExpanded);
            }

            break;
          }
        }

        if (((_nodeMap$get = nodeMap.get(id)) === null || _nodeMap$get === void 0 ? void 0 : _nodeMap$get.parent) !== undefined) {
          onFocus(getPreviousVisibleNode(visibleNodes, id));
        }

        break;

      case 'Home':
        e.preventDefault();
        onFocus(visibleNodes[0]);
        break;

      case 'End':
        e.preventDefault();
        onFocus(visibleNodes[visibleNodes.length - 1]);
        break;

      default:
        break;
    }
  };

  return onKeyDown;
};