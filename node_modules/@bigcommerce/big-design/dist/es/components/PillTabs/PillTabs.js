import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { CheckIcon, MoreHorizIcon } from '@bigcommerce/big-design-icons';
import React, { createRef, useCallback, useEffect, useMemo, useState } from 'react';
import { useWindowResizeListener } from '../../hooks';
import { Button } from '../Button';
import { Dropdown } from '../Dropdown';
import { Flex } from '../Flex';
import { StyledFlexItem, StyledPillTab } from './styled';
export var PillTabs = function PillTabs(_ref) {
  var activePills = _ref.activePills,
      items = _ref.items,
      onPillClick = _ref.onPillClick;
  var parentRef = /*#__PURE__*/createRef();
  var dropdownRef = /*#__PURE__*/createRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isMenuVisible = _useState2[0],
      setIsMenuVisible = _useState2[1];

  var _useState3 = useState(items.map(function (item) {
    return {
      isVisible: true,
      item: item,
      ref: /*#__PURE__*/createRef()
    };
  })),
      _useState4 = _slicedToArray(_useState3, 2),
      pillsState = _useState4[0],
      setPillsState = _useState4[1];

  var hideOverflowedPills = useCallback(function () {
    var _parentRef$current, _dropdownRef$current;

    var parentWidth = (_parentRef$current = parentRef.current) === null || _parentRef$current === void 0 ? void 0 : _parentRef$current.offsetWidth;
    var dropdownWidth = (_dropdownRef$current = dropdownRef.current) === null || _dropdownRef$current === void 0 ? void 0 : _dropdownRef$current.offsetWidth;

    if (!parentWidth || !dropdownWidth) {
      return;
    }

    var remainingWidth = parentWidth;
    var newState = pillsState.map(function (stateObj) {
      var _stateObj$ref$current;

      var pillWidth = (_stateObj$ref$current = stateObj.ref.current) === null || _stateObj$ref$current === void 0 ? void 0 : _stateObj$ref$current.offsetWidth;

      if (!pillWidth) {
        return stateObj;
      }

      if (remainingWidth - pillWidth > dropdownWidth) {
        remainingWidth = remainingWidth - pillWidth;
        return _objectSpread(_objectSpread({}, stateObj), {}, {
          isVisible: true
        });
      }

      return _objectSpread(_objectSpread({}, stateObj), {}, {
        isVisible: false
      });
    });
    var visiblePills = pillsState.filter(function (stateObj) {
      return stateObj.isVisible;
    });
    var newVisiblePills = newState.filter(function (stateObj) {
      return stateObj.isVisible;
    });

    if (visiblePills.length !== newVisiblePills.length) {
      setIsMenuVisible(newVisiblePills.length !== items.length);
      setPillsState(newState);
    }
  }, [items, parentRef, dropdownRef, pillsState]);
  var renderedDropdown = useMemo(function () {
    var dropdownItems = pillsState.filter(function (stateObj) {
      return !stateObj.isVisible;
    }).map(function (stateObj) {
      var item = items.find(function (_ref2) {
        var title = _ref2.title;
        return title === stateObj.item.title;
      });
      var isActive = item ? activePills.includes(item.id) : false;
      return {
        content: stateObj.item.title,
        onItemClick: function onItemClick() {
          return onPillClick(stateObj.item.id);
        },
        hash: stateObj.item.title.toLowerCase(),
        icon: isActive ? /*#__PURE__*/React.createElement(CheckIcon, null) : undefined
      };
    });
    return /*#__PURE__*/React.createElement(StyledFlexItem, {
      "data-testid": "pilltabs-dropdown-toggle",
      isVisible: isMenuVisible,
      ref: dropdownRef,
      role: "listitem"
    }, /*#__PURE__*/React.createElement(Dropdown, {
      items: dropdownItems,
      toggle: /*#__PURE__*/React.createElement(Button, {
        iconOnly: /*#__PURE__*/React.createElement(MoreHorizIcon, {
          title: "add"
        }),
        variant: "subtle"
      })
    }));
  }, [items, pillsState, isMenuVisible, dropdownRef, activePills, onPillClick]);
  var renderedPills = useMemo(function () {
    return items.map(function (item, index) {
      return /*#__PURE__*/React.createElement(StyledFlexItem, {
        "data-testid": "pilltabs-pill-".concat(index),
        key: index,
        ref: pillsState[index].ref,
        isVisible: pillsState[index].isVisible,
        role: "listitem"
      }, /*#__PURE__*/React.createElement(StyledPillTab, {
        disabled: !pillsState[index].isVisible,
        variant: "subtle",
        isActive: activePills.includes(item.id),
        onClick: function onClick() {
          return onPillClick(item.id);
        },
        marginRight: "xLarge"
      }, item.title));
    });
  }, [items, pillsState, activePills, onPillClick]);
  useEffect(function () {
    hideOverflowedPills();
  }, [items, parentRef, pillsState, hideOverflowedPills]);
  useWindowResizeListener(function () {
    hideOverflowedPills();
  });
  return items.length > 0 ? /*#__PURE__*/React.createElement(Flex, {
    "data-testid": "pilltabs-wrapper",
    flexDirection: "row",
    flexWrap: "nowrap",
    ref: parentRef,
    role: "list"
  }, renderedPills, renderedDropdown) : null;
};
PillTabs.displayName = 'Pill Tabs';