import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["autoWidth", "className", "disabled", "maxHeight", "id", "items", "placement", "positionFixed", "toggle", "style"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useSelect } from 'downshift';
import React, { cloneElement, isValidElement, memo, useCallback, useMemo, useRef } from 'react';
import { usePopper } from 'react-popper';
import { useUniqueId } from '../../hooks';
import { Box } from '../Box';
import { List } from '../List';
import { StyledBox } from './styled';
export var Dropdown = /*#__PURE__*/memo(function (_ref) {
  var _ref$autoWidth = _ref.autoWidth,
      autoWidth = _ref$autoWidth === void 0 ? false : _ref$autoWidth,
      className = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      maxHeight = _ref.maxHeight,
      id = _ref.id,
      items = _ref.items,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,
      _ref$positionFixed = _ref.positionFixed,
      positionFixed = _ref$positionFixed === void 0 ? false : _ref$positionFixed,
      toggle = _ref.toggle,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, _excluded);

  var dropdownUniqueId = useUniqueId('dropdown');
  var flattenItems = useCallback(function (items) {
    var isGroups = function isGroups(items) {
      return items.every(function (items) {
        return 'items' in items && !('content' in items);
      });
    };

    return isGroups(items) ? items.map(function (group) {
      return group.items;
    }).reduce(function (acum, curr) {
      return acum.concat(curr);
    }, []) : items;
  }, []); // We only need the items to pass down to Downshift, not groups

  var flattenedItems = useMemo(function () {
    return flattenItems(items);
  }, [flattenItems, items]);
  var handleOnSelectedItemChange = useCallback(function (_ref2) {
    var selectedItem = _ref2.selectedItem;

    // Links don't trigger an onItemClick
    if (selectedItem && selectedItem.type !== 'link' && typeof selectedItem.onItemClick === 'function') {
      // Call onItemClick with selected item
      selectedItem.onItemClick(selectedItem);
    }
  }, []);

  var _useSelect = useSelect({
    circularNavigation: true,
    defaultHighlightedIndex: 0,
    id: dropdownUniqueId,
    itemToString: function itemToString(item) {
      return item ? item.content : '';
    },
    items: flattenedItems,
    menuId: id,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: null,
    // We never set a selected item
    toggleButtonId: toggle.props.id
  }),
      getItemProps = _useSelect.getItemProps,
      getMenuProps = _useSelect.getMenuProps,
      getToggleButtonProps = _useSelect.getToggleButtonProps,
      highlightedIndex = _useSelect.highlightedIndex,
      isOpen = _useSelect.isOpen; // Popper


  var referenceRef = useRef(null);
  var popperRef = useRef(null);

  var _usePopper = usePopper(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: 'eventListeners',
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 4]
      }
    }],
    placement: placement,
    strategy: positionFixed ? 'fixed' : 'absolute'
  }),
      attributes = _usePopper.attributes,
      styles = _usePopper.styles,
      update = _usePopper.update;

  var renderToggle = useMemo(function () {
    return /*#__PURE__*/isValidElement(toggle) && /*#__PURE__*/cloneElement(toggle, _objectSpread({}, getToggleButtonProps({
      'aria-expanded': isOpen,
      // Because of memoization, we need to manually set this option
      disabled: disabled,
      ref: referenceRef
    })));
  }, [disabled, getToggleButtonProps, isOpen, toggle]);
  return /*#__PURE__*/React.createElement(StyledBox, null, renderToggle, /*#__PURE__*/React.createElement(Box, _extends({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), /*#__PURE__*/React.createElement(List, _extends({}, props, {
    autoWidth: autoWidth,
    getItemProps: getItemProps,
    getMenuProps: getMenuProps,
    highlightedIndex: highlightedIndex,
    isDropdown: true,
    isOpen: isOpen,
    items: items,
    maxHeight: maxHeight,
    update: update
  }))));
});