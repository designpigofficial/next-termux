import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["actionType", "autoWidth", "forwardedRef", "index", "isAction", "isChecked", "isHighlighted", "isSelected", "item", "getItemProps", "addItem", "removeItem"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { CheckIcon } from '@bigcommerce/big-design-icons';
import React, { cloneElement, forwardRef, isValidElement, memo } from 'react';
import { typedMemo } from '../../../utils';
import { Checkbox } from '../../Checkbox';
import { Flex, FlexItem } from '../../Flex';
import { Tooltip } from '../../Tooltip';
import { Small } from '../../Typography';
import { StyledLink, StyledListItem } from './styled';
var StyleableListItem = typedMemo(function (_ref) {
  var _ref$actionType = _ref.actionType,
      actionType = _ref$actionType === void 0 ? 'normal' : _ref$actionType,
      _ref$autoWidth = _ref.autoWidth,
      autoWidth = _ref$autoWidth === void 0 ? false : _ref$autoWidth,
      forwardedRef = _ref.forwardedRef,
      index = _ref.index,
      _ref$isAction = _ref.isAction,
      isAction = _ref$isAction === void 0 ? false : _ref$isAction,
      _ref$isChecked = _ref.isChecked,
      isChecked = _ref$isChecked === void 0 ? false : _ref$isChecked,
      isHighlighted = _ref.isHighlighted,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      item = _ref.item,
      getItemProps = _ref.getItemProps,
      addItem = _ref.addItem,
      removeItem = _ref.removeItem,
      props = _objectWithoutProperties(_ref, _excluded);

  return removeItem && addItem ? /*#__PURE__*/React.createElement(StyledListItem, _extends({}, getItemProps(_objectSpread(_objectSpread({}, props), {}, {
    disabled: item.disabled,
    index: index,
    item: item,
    onClick: function onClick() {
      if (item.disabled) {
        return;
      }

      var hasValue = function hasValue(item) {
        return 'value' in item;
      };

      if (hasValue(item)) {
        isChecked ? removeItem(item) : addItem(item);
      }
    },
    ref: forwardedRef
  })), {
    actionType: actionType,
    autoWidth: autoWidth,
    isAction: isAction,
    isHighlighted: isHighlighted
  }), /*#__PURE__*/React.createElement(Checkbox, {
    checked: isChecked,
    disabled: item.disabled,
    description: item.description,
    label: item.content,
    onChange: function onChange() {
      return null;
    },
    onClick: function onClick(event) {
      event.preventDefault();
      event.stopPropagation();
    },
    tabIndex: -1
  })) : /*#__PURE__*/React.createElement(StyledListItem, _extends({}, getItemProps(_objectSpread(_objectSpread({}, props), {}, {
    disabled: item.disabled,
    index: index,
    item: item,
    ref: forwardedRef
  })), {
    actionType: actionType,
    autoWidth: autoWidth,
    isAction: isAction,
    isHighlighted: isHighlighted,
    isSelected: isSelected
  }), getContent(item, isHighlighted), isSelected && /*#__PURE__*/React.createElement(CheckIcon, {
    color: "primary",
    size: "large"
  }));
});
export var ListItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(StyleableListItem, _extends({}, props, {
    forwardedRef: ref
  }));
}));

var getContent = function getContent(item, isHighlighted) {
  var content = item.content,
      disabled = item.disabled,
      description = item.description,
      icon = item.icon;
  var baseContent = /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    flexDirection: "row"
  }, icon && /*#__PURE__*/React.createElement(FlexItem, {
    alignSelf: description ? 'flex-start' : undefined,
    paddingRight: "xSmall",
    paddingTop: description ? 'xSmall' : undefined
  }, renderIcon(item, isHighlighted)), description ? /*#__PURE__*/React.createElement(FlexItem, {
    paddingVertical: "xSmall"
  }, content, /*#__PURE__*/React.createElement(Small, {
    color: descriptionColor(disabled)
  }, description)) : content);
  var finalContent = 'type' in item && item.type === 'link' && !disabled ? wrapInLink(item, baseContent) : baseContent;
  return disabled && 'tooltip' in item && item.tooltip ? wrapInTooltip(item.tooltip, finalContent) : finalContent;
};

var renderIcon = function renderIcon(item, isHighlighted) {
  return /*#__PURE__*/isValidElement(item.icon) && /*#__PURE__*/cloneElement(item.icon, {
    color: iconColor(item, isHighlighted),
    size: 'large'
  });
};

var iconColor = function iconColor(item, isHighlighted) {
  if (item.disabled) {
    return 'secondary40';
  }

  if (!isHighlighted || !('onActionClick' in item)) {
    return 'secondary60';
  }

  return 'actionType' in item ? item.actionType === 'destructive' ? 'danger50' : 'primary' : 'primary';
};

var descriptionColor = function descriptionColor(isDisabled) {
  return isDisabled ? 'secondary40' : 'secondary60';
};

var wrapInLink = function wrapInLink(item, content) {
  return /*#__PURE__*/React.createElement(StyledLink, {
    href: item.url,
    tabIndex: -1,
    target: item.target
  }, content);
};

var wrapInTooltip = function wrapInTooltip(tooltip, tooltipTrigger) {
  return /*#__PURE__*/React.createElement(Tooltip, {
    placement: "left",
    trigger: tooltipTrigger,
    modifiers: [{
      name: 'preventOverflow'
    }, {
      name: 'offset',
      options: {
        offset: [0, 20]
      }
    }],
    inline: false
  }, tooltip);
};