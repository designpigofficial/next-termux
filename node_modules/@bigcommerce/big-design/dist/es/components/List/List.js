import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["action", "addItem", "autoWidth", "filteredItems", "forwardedRef", "getItemProps", "getMenuProps", "highlightedIndex", "isDropdown", "isOpen", "items", "maxHeight", "selectedItem", "selectedItems", "update", "removeItem"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { forwardRef, Fragment, memo, useCallback, useMemo, useRef } from 'react';
import { useIsomorphicLayoutEffect, useWindowSize } from '../../hooks';
import { typedMemo } from '../../utils';
import { Box } from '../Box';
import { ListGroupHeader } from './GroupHeader';
import { ListGroupSeparator } from './GroupSeparator';
import { ListItem } from './Item';
import { StyledList } from './styled';
var StyleableList = typedMemo(function (_ref) {
  var action = _ref.action,
      addItem = _ref.addItem,
      autoWidth = _ref.autoWidth,
      filteredItems = _ref.filteredItems,
      forwardedRef = _ref.forwardedRef,
      getItemProps = _ref.getItemProps,
      getMenuProps = _ref.getMenuProps,
      highlightedIndex = _ref.highlightedIndex,
      _ref$isDropdown = _ref.isDropdown,
      isDropdown = _ref$isDropdown === void 0 ? false : _ref$isDropdown,
      isOpen = _ref.isOpen,
      items = _ref.items,
      _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? 250 : _ref$maxHeight,
      selectedItem = _ref.selectedItem,
      selectedItems = _ref.selectedItems,
      update = _ref.update,
      removeItem = _ref.removeItem,
      props = _objectWithoutProperties(_ref, _excluded);

  var itemKey = useRef(0);

  var _useWindowSize = useWindowSize(),
      height = _useWindowSize.height,
      width = _useWindowSize.width; // Recalculate Popper for correct positioning


  useIsomorphicLayoutEffect(function () {
    function scheduleUpdate() {
      return _scheduleUpdate.apply(this, arguments);
    }

    function _scheduleUpdate() {
      _scheduleUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(update && isOpen)) {
                  _context.next = 3;
                  break;
                }

                _context.next = 3;
                return update();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _scheduleUpdate.apply(this, arguments);
    }

    scheduleUpdate();
  }, [isOpen, height, width, selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length]);
  var renderAction = useCallback(function (action) {
    var key = itemKey.current;
    return /*#__PURE__*/React.createElement(Box, {
      borderTop: "box",
      marginTop: "xSmall",
      paddingTop: "xSmall"
    }, /*#__PURE__*/React.createElement(ListItem, {
      actionType: action.actionType,
      autoWidth: autoWidth,
      getItemProps: getItemProps,
      index: key,
      isAction: true,
      isHighlighted: highlightedIndex === key,
      isSelected: false,
      item: action,
      key: "action"
    }));
  }, [getItemProps, autoWidth, highlightedIndex]);
  var renderItems = useCallback(function (listItems) {
    return Array.isArray(listItems) && listItems.map(function (item) {
      // Skip rendering the option if it not found in the filtered list
      if (filteredItems && isOption(item) && !filteredItems.find(function (filteredItem) {
        return isOption(filteredItem) && filteredItem.value === item.value;
      })) {
        return null;
      }

      var key = itemKey.current;
      itemKey.current += 1;
      var isChecked = isOption(item) && selectedItems && Boolean(selectedItems.find(function (selected) {
        return selected.value === item.value;
      }));

      var hasActionType = function hasActionType(item) {
        return 'actionType' in item;
      };

      return /*#__PURE__*/React.createElement(ListItem, {
        addItem: addItem,
        autoWidth: autoWidth,
        actionType: hasActionType(item) ? item.actionType : 'normal',
        getItemProps: getItemProps,
        index: key,
        isAction: isDropdown,
        isChecked: isChecked || false,
        isHighlighted: highlightedIndex === key,
        isSelected: !isDropdown && isOption(item) && (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value) === item.value,
        item: item,
        key: "".concat(key, "-").concat(item.content),
        removeItem: removeItem
      });
    });
  }, [addItem, autoWidth, filteredItems, getItemProps, highlightedIndex, isDropdown, removeItem, selectedItem, selectedItems]);
  var renderGroup = useCallback(function (group) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, group.separated && /*#__PURE__*/React.createElement(ListGroupSeparator, null), group.label && /*#__PURE__*/React.createElement(ListGroupHeader, null, group.label), isItemGroup(group) && renderItems(group.items), isOptionGroup(group) && renderItems(group.options));
  }, [renderItems]);
  var renderChildren = useMemo(function () {
    // Reset the key every time we rerender children
    itemKey.current = 0;

    var groupFragment = function groupFragment(items) {
      return items.map(function (group, index) {
        return /*#__PURE__*/React.createElement(Fragment, {
          key: index
        }, renderGroup(group));
      });
    };

    if (Array.isArray(items) && isGroups(items)) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, groupFragment(items), action && renderAction(action));
    }

    if (Array.isArray(items) && isItems(items)) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, renderItems(items), action && renderAction(action));
    }
  }, [action, items, renderAction, renderGroup, renderItems]);
  return /*#__PURE__*/React.createElement(StyledList, _extends({}, getMenuProps(_objectSpread(_objectSpread({}, props), {}, {
    onKeyDown: function onKeyDown(event) {
      if (event.key === 'Enter') {
        var element = event.currentTarget.children[highlightedIndex];
        var link = element.querySelector('a'); // We want to click the link if it is selected

        if (link && !link.getAttribute('disabled')) {
          link.click();
        }
      }
    },
    ref: forwardedRef
  })), {
    maxHeight: maxHeight
  }), isOpen && renderChildren);
});
export var List = /*#__PURE__*/memo(
/*#__PURE__*/
// Using unknown because memo looses the generic type
forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(StyleableList, _extends({}, props, {
    forwardedRef: ref
  }));
}));

// Merging types into union
// Issue: https://github.com/microsoft/TypeScript/issues/33591
var isGroups = function isGroups(items) {
  return items.every(function (item) {
    return isItemGroup(item) || isOptionGroup(item);
  });
};

var isItems = function isItems(items) {
  return items.every(function (item) {
    return isItem(item) || isOption(item);
  });
};

var isOption = function isOption(item) {
  return 'value' in item;
};

var isItem = function isItem(item) {
  return 'content' in item && !('items' in item);
};

var isItemGroup = function isItemGroup(item) {
  return 'items' in item && !('content' in item);
};

var isOptionGroup = function isOptionGroup(item) {
  return 'options' in item && !('value' in item);
};