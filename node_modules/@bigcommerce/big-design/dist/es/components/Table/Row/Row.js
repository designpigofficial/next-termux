import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["columns", "forwardedRef", "isDragging", "isSelectable", "isSelected", "item", "showDragIcon", "onItemSelect"];
import { DragIndicatorIcon } from '@bigcommerce/big-design-icons';
import React, { forwardRef } from 'react';
import { typedMemo } from '../../../utils';
import { Checkbox } from '../../Checkbox';
import { DataCell } from '../DataCell';
import { StyledTableRow } from './styled';

var InternalRow = function InternalRow(_ref) {
  var columns = _ref.columns,
      forwardedRef = _ref.forwardedRef,
      _ref$isDragging = _ref.isDragging,
      isDragging = _ref$isDragging === void 0 ? false : _ref$isDragging,
      _ref$isSelectable = _ref.isSelectable,
      isSelectable = _ref$isSelectable === void 0 ? false : _ref$isSelectable,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      item = _ref.item,
      _ref$showDragIcon = _ref.showDragIcon,
      showDragIcon = _ref$showDragIcon === void 0 ? false : _ref$showDragIcon,
      onItemSelect = _ref.onItemSelect,
      rest = _objectWithoutProperties(_ref, _excluded);

  var onChange = function onChange() {
    if (onItemSelect) {
      onItemSelect(item);
    }
  };

  var label = isSelected ? "Selected" : "Unselected";
  return /*#__PURE__*/React.createElement(StyledTableRow, _extends({
    isSelected: isSelected,
    ref: forwardedRef,
    isDragging: isDragging
  }, rest), showDragIcon && /*#__PURE__*/React.createElement(DataCell, null, /*#__PURE__*/React.createElement(DragIndicatorIcon, null)), isSelectable && /*#__PURE__*/React.createElement(DataCell, {
    key: "data-checkbox",
    isCheckbox: true
  }, /*#__PURE__*/React.createElement(Checkbox, {
    checked: isSelected,
    hiddenLabel: true,
    label: label,
    onChange: onChange
  })), columns.map(function (_ref2, columnIndex) {
    var CellContent = _ref2.render,
        align = _ref2.align,
        display = _ref2.display,
        verticalAlign = _ref2.verticalAlign,
        width = _ref2.width,
        _ref2$withPadding = _ref2.withPadding,
        withPadding = _ref2$withPadding === void 0 ? true : _ref2$withPadding;
    return /*#__PURE__*/React.createElement(DataCell, {
      key: columnIndex,
      align: align,
      display: display,
      verticalAlign: verticalAlign,
      width: width,
      withPadding: withPadding
    }, /*#__PURE__*/React.createElement(CellContent, item));
  }));
};

export var Row = typedMemo( /*#__PURE__*/forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(InternalRow, _extends({}, props, {
    forwardedRef: ref
  }));
}));