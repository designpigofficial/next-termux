/// <reference types="react" />
import { State } from 'zustand';
import { Cell, ExpandableRows, InternalWorksheetColumn } from '../../types';
export declare const Provider: ({ initialStore, createStore, children, }: {
    initialStore?: import("zustand").UseStore<BaseState<any>> | undefined;
    createStore: () => import("zustand").UseStore<BaseState<any>>;
    children: import("react").ReactNode;
}) => import("react").FunctionComponentElement<import("react").ProviderProps<import("zustand").UseStore<BaseState<any>> | undefined>>, useStore: import("zustand/context").UseContextStore<BaseState<any>>;
interface BaseState<Item> extends State {
    columns: InternalWorksheetColumn<Item>[];
    editedCells: Array<Cell<Item>>;
    editingCell: Cell<Item> | null;
    expandableRows: ExpandableRows;
    hiddenRows: Array<string | number>;
    invalidCells: Array<Cell<Item>>;
    openedModal: keyof Item | null;
    rows: Item[];
    selectedCells: Array<Cell<Item>>;
    selectedRows: number[];
    tableRef: HTMLTableElement | null;
    addEditedCells: (cells: Array<Cell<Item>>) => void;
    addInvalidCells: (cells: Array<Cell<Item>>) => void;
    removeInvalidCells: (cells: Array<Cell<Item>>) => void;
    setColumns: (columns: Array<InternalWorksheetColumn<Item>>) => void;
    setEditingCell: (cell: Cell<Item> | null) => void;
    setExpandableRows: (expandableRows: ExpandableRows) => void;
    setHiddenRows: (hiddenRow: Array<string | number>) => void;
    setOpenModal: (value: keyof Item | null) => void;
    setRows: (rows: Item[]) => void;
    setSelectedCells: (cells: Array<Cell<Item>>) => void;
    setSelectedRows: (rows: number[]) => void;
    setTableRef: (ref: HTMLTableElement | null) => void;
}
export declare const createStore: () => import("zustand").UseStore<BaseState<any>>;
export {};
//# sourceMappingURL=useStore.d.ts.map